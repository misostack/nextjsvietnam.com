<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>frameworks on Useful NodeJS Tricks, JavaScript Tips, Tricks and Best Practices</title><link>https://nextjsvietnam.com/categories/frameworks/</link><description>Recent content in frameworks on Useful NodeJS Tricks, JavaScript Tips, Tricks and Best Practices</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Oct 2022 14:31:27 +0700</lastBuildDate><atom:link href="https://nextjsvietnam.com/categories/frameworks/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage Your Reactjs State the Right Way</title><link>https://nextjsvietnam.com/post/manage-your-reactjs-state-the-right-way/</link><pubDate>Wed, 05 Oct 2022 14:31:27 +0700</pubDate><guid>https://nextjsvietnam.com/post/manage-your-reactjs-state-the-right-way/</guid><description>Các khái niệm cần nắm trước khi đọc bài viết này:
Khái niệm cơ bản về React State Khái niệm cơ bản về React Hook Nội dung được chia sẻ phạm vi bài viết này:
Các nguyên tắc khi thiết kế data structure cho state Một số ví dụ cụ thể trong các dự án thực tế Phần 1: Các nguyên tắc khi thiết kế data structure cho state Về mặt định nghĩa, thì State trong ReactJS là 1 Javascript Object phản ánh phần dữ liệu của component và có thể bị thay đổi giá trị do các tác nhân trong ứng dụng ( người dùng, web worker, web socket, &amp;hellip;)</description></item><item><title>The Best Way to Upload File in Nestjs</title><link>https://nextjsvietnam.com/post/the-best-way-to-upload-file-in-nestjs/</link><pubDate>Wed, 10 Aug 2022 17:01:06 +0700</pubDate><guid>https://nextjsvietnam.com/post/the-best-way-to-upload-file-in-nestjs/</guid><description>In the last topic, we&amp;rsquo;ve already learn how to upload file with Multer. In this post, I wanna share with you the NestJS&amp;rsquo;s best practice to upload file.
Firstly, we need to install type safe for multer in case you didn&amp;rsquo;t.
npm i -D @types/multer In real world projects, we may have to allow user upload a single file or multiple files. With multer we need to define with the target route, we will upload single or multiple.</description></item><item><title>Vuejs How to Add TailwindCSS in Your Application</title><link>https://nextjsvietnam.com/post/vuejs-how-to-add-tailwind-in-your-application/</link><pubDate>Fri, 05 Aug 2022 20:07:21 +0700</pubDate><guid>https://nextjsvietnam.com/post/vuejs-how-to-add-tailwind-in-your-application/</guid><description>Install tailwindcss&amp;rsquo;s dependency packages Configure your template paths tailwind.config.js Add Sass Support npm install -D tailwindcss postcss autoprefixer npx tailwindcss init tailwind.config.cjs
/** @type {import(&amp;#39;tailwindcss&amp;#39;).Config} */ module.exports = { content: [&amp;#34;./index.html&amp;#34;, &amp;#34;./src/**/*.{vue,js,ts,jsx,tsx}&amp;#34;], theme: { extend: {}, }, plugins: [], }; npm add -D sass src/assets/scss/global.scss
/* Fonts */ @import url(&amp;#34;https://fonts.googleapis.com/css2?family=Merriweather:wght@400;700&amp;amp;display=swap&amp;#34;); @import url(&amp;#34;https://fonts.googleapis.com/icon?family=Material+Icons&amp;#34;); /* Tailwind base */ @tailwind base; @tailwind components; @tailwind utilities; h1, h2, h3, h4, h5, h6 { @apply font-bold; font-family: &amp;#34;Merriweather&amp;#34;, serif; } h6 { @apply text-xs; } h5 { @apply text-xs; } h4 { @apply text-sm; } h3 { @apply text-base; } h2 { @apply text-2xl; } h1 { @apply text-3xl; } .</description></item><item><title>Nestjs Request and Response Object</title><link>https://nextjsvietnam.com/post/nestjs-request-and-response-object/</link><pubDate>Fri, 05 Aug 2022 10:06:04 +0700</pubDate><guid>https://nextjsvietnam.com/post/nestjs-request-and-response-object/</guid><description>Note: All of demo source code you can find our in github nestjs boilerplate
As you&amp;rsquo;ve known, in a request we will have:
Route Params ( included in URL ) Query Params ( included in URL ) Body ( json/form-data/multipart/form-data ) There are 2 ways to get these values
Library specific Approach - Express import { Controller, Req, Res } from &amp;#34;@nestjs/common&amp;#34;; import { Request, Response } from &amp;#34;express&amp;#34;; @Controller(&amp;#34;examples&amp;#34;) export class ExamplesController { @Post(&amp;#34;request-object/express/:email&amp;#34;) exampleRequestObjectExpress(@Req() req: Request, @Res() res: Response) { const responseData = { approach: &amp;#34;express&amp;#34;, routeParams: req.</description></item><item><title>Nestjs Pipes</title><link>https://nextjsvietnam.com/post/nestjs-pipes/</link><pubDate>Thu, 04 Aug 2022 10:46:09 +0700</pubDate><guid>https://nextjsvietnam.com/post/nestjs-pipes/</guid><description>Note: All of demo source code you can find our in github nestjs boilerplate
What is Pipe?
A pipe is a class annotated with the @Injectable() decorator, which implements the PipeTransform interface
Pipes operate on the arguments being processed by a controller route handler.
Nest interposes a pipe just before a method is invoked, and the pipe receives the arguments destined for the method and operates on them</description></item><item><title>Validate Request Input in Nestjs</title><link>https://nextjsvietnam.com/post/validate-request-input-in-nestjs/</link><pubDate>Fri, 29 Jul 2022 15:17:27 +0700</pubDate><guid>https://nextjsvietnam.com/post/validate-request-input-in-nestjs/</guid><description>Note: All of demo source code you can find our in github nestjs boilerplate
It is best practice to validate the correctness of any data sent into a web application
There are several libraries support us to verify data :
json schema joi validator And in typescript, we have a special library that support decorator
Class Validator - internally uses validator.js to perform validation. Class-validator works on both browser and node.</description></item><item><title>Nestjs Provider</title><link>https://nextjsvietnam.com/post/nestjs-provider/</link><pubDate>Thu, 28 Jul 2022 14:41:08 +0700</pubDate><guid>https://nextjsvietnam.com/post/nestjs-provider/</guid><description>Note: All of demo source code you can find our in github nestjs boilerplate
Many of the basic Nest classes may be treated as a provider:
Services Repositories Factories Helpers The main idea of a provider is that it can be injected as a dependency
This means NestJS will be act as a container and creating relationship between objects and wire them up at runtime
When creating a provider, we should consider these aspects</description></item><item><title>Developer Your Rest Api With Nestjs</title><link>https://nextjsvietnam.com/post/developer-your-rest-api-with-nestjs/</link><pubDate>Tue, 12 Jul 2022 11:39:11 +0700</pubDate><guid>https://nextjsvietnam.com/post/developer-your-rest-api-with-nestjs/</guid><description>Ứng dụng Xây dựng REST API cung cấp dữ liệu thời gian thực giá vàng
Tính năng cập nhật giá vàng Cập nhật giá vàng theo ngày : nhập thông thường Cập nhật giá vàng hàng loạt: import tập tin excel theo định dạng Cập nhật giá vàng tự động: thiết lập link liên kết lấy giá vàng, khoảng thời gian lấy Tính năng hiển thị giá vàng Dạng hiện thị : dạng bảng hoặc dạng biểu đồ</description></item><item><title>Create New Website With Nextjs</title><link>https://nextjsvietnam.com/post/create-new-website-with-nextjs/</link><pubDate>Tue, 12 Jul 2022 11:38:00 +0700</pubDate><guid>https://nextjsvietnam.com/post/create-new-website-with-nextjs/</guid><description/></item></channel></rss>