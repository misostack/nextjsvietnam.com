<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nestjs on Useful NodeJS Tricks, JavaScript Tips, Tricks and Best Practices</title>
    <link>http://localhost:1313/tags/nestjs/</link>
    <description>Recent content in Nestjs on Useful NodeJS Tricks, JavaScript Tips, Tricks and Best Practices</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Apr 2024 14:31:26 +0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/nestjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nestjs Passing Data Between Layers in Domain Driven Design</title>
      <link>http://localhost:1313/post/nestjs-passing-data-between-layers-in-ddd/</link>
      <pubDate>Sat, 27 Apr 2024 14:31:26 +0700</pubDate>
      <guid>http://localhost:1313/post/nestjs-passing-data-between-layers-in-ddd/</guid>
      <description>&lt;p&gt;We determined that we will have 3 layers: Presentation(Controller), Service, Data Layer(Repository). And the flow is:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Controllers will inject Services to use&lt;/li&gt;&#xA;&lt;li&gt;Services will inject Repository to use.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So when passing data between layers, the dto/models will be use should belongs to which layers.&lt;/p&gt;&#xA;&lt;h2 id=&#34;top-down-approach-1st-option&#34;&gt;Top-Down Approach (1st Option)&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://gist.github.com/assets/31009750/716805a9-8ba0-4479-8f59-3039e560fbb3&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;controllers-layer&#34;&gt;Controllers Layer:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Responsibility: Handle incoming HTTP requests, delegate business logic to services.&lt;/li&gt;&#xA;&lt;li&gt;Data Transfer: Interact with DTOs provided by services for transferring data between the client and the server.&lt;/li&gt;&#xA;&lt;li&gt;Dependency: Depend on services for handling business logic. Remain unaware of entities.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;services-layer&#34;&gt;Services Layer:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Responsibility: Contain business logic, orchestrate data flow, and interact with repositories.&lt;/li&gt;&#xA;&lt;li&gt;Data Transfer: Map DTOs to entities before passing them to the repository layer, and vice versa. Provide DTOs to controllers for data exchange.&lt;/li&gt;&#xA;&lt;li&gt;Dependency: Depend on repositories for data access and storage operations.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;repositories-layer&#34;&gt;Repositories Layer:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Responsibility: Handle data access and storage operations, interact directly with the database, and manage entities.&lt;/li&gt;&#xA;&lt;li&gt;Data Transfer: Operate directly with entities without any knowledge of DTOs or higher-level business logic.&lt;/li&gt;&#xA;&lt;li&gt;Dependency: Independent of higher-level layers, operates directly with the database.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;user-module-sample&#34;&gt;User Module Sample&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;User Controller&lt;/p&gt;</description>
    </item>
    <item>
      <title>Khóa học NestJS - Bài 06 Hướng dẫn viết Unit Test</title>
      <link>http://localhost:1313/post/khoa-hoc-nestjs-bai-06-viet-unit-test/</link>
      <pubDate>Thu, 06 Jul 2023 21:52:16 +0700</pubDate>
      <guid>http://localhost:1313/post/khoa-hoc-nestjs-bai-06-viet-unit-test/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/misostack/nestjs2024/tree/course-basic/lession-06&#34;&gt;Lession 06 Source Code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bài-06&#34;&gt;Bài 06&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Giới thiệu sơ qua về Unit Test&lt;/li&gt;&#xA;&lt;li&gt;Cách test một service trong NestJS&lt;/li&gt;&#xA;&lt;li&gt;Hướng dẫn debug unit test trong NestJS&lt;/li&gt;&#xA;&lt;li&gt;Ứng dụng viết Unit Test cho PetCategory&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Đầu tiên, các anh/chị có thể thấy rằng sẽ có một mối quan hệ mật thiết giữa 3 thứ trong ngành này: errors/bugs(lỗi), stress(căng thẳng), tests(kiểm tra)&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31009750/261230050-80f15af7-6ed7-49fd-9907-6bb248aa7137.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Càng nhiều lỗi (errors/bugs) thì càng căng thẳng(stress)&lt;/li&gt;&#xA;&lt;li&gt;Càng căng thẳng(stress) thì càng tạo ra nhiều lỗi(errors/bugs)&lt;/li&gt;&#xA;&lt;li&gt;Càng kiểm tra nhiều(test) thì càng ít lỗi(errors/bugs) do đã phát hiện và được sửa&lt;/li&gt;&#xA;&lt;li&gt;Càng ít lỗi(errors/bugs) thì càng ít cằng thẳng(stress)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Do đó, việc test nhiều/kĩ sẽ đảm bảo được các anh/chị sẽ ít căng thẳng(stress) hơn.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Khóa học NestJS Bài 05 - Repository Pattern</title>
      <link>http://localhost:1313/post/khoa-hoc-nestjs-bai-05-repository-pattern/</link>
      <pubDate>Thu, 06 Jul 2023 21:46:31 +0700</pubDate>
      <guid>http://localhost:1313/post/khoa-hoc-nestjs-bai-05-repository-pattern/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/misostack/nestjs-tutorial-2023/tree/lession05&#34;&gt;Lession 05 Source Code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bài-05&#34;&gt;Bài 05&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Giới thiệu sơ qua về repository pattern&lt;/li&gt;&#xA;&lt;li&gt;Giới thiệu về dependency injection trong NestJS&lt;/li&gt;&#xA;&lt;li&gt;Refactor code PetCategory áp dụng repository pattern&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;giới-thiệu-sơ-qua-về-repository-pattern&#34;&gt;Giới thiệu sơ qua về repository pattern&lt;/h3&gt;&#xA;&lt;p&gt;Trong bài trước, các anh chị có thể thấy sơ đồ sau trong mô hình MVC&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31009750/255315727-b8a19417-ca4f-4791-9158-e62a1bbe41ee.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Controller sử dụng trực tiếp Model của ORM để thực hiện truy vấn vào cơ sở dữ liệu.&#xA;Thiết kế này sẽ bộc lộ các điểm yếu sau:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Khóa học NestJS Bài 04 - Model and Repository Pattern</title>
      <link>http://localhost:1313/post/khoa-hoc-nestjs-bai-04-model-and-repository-pattern/</link>
      <pubDate>Mon, 03 Jul 2023 14:29:29 +0700</pubDate>
      <guid>http://localhost:1313/post/khoa-hoc-nestjs-bai-04-model-and-repository-pattern/</guid>
      <description>&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/misostack/nestjs-tutorial-2023/tree/lession04&#34;&gt;Lession 04 Source Code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bài-04&#34;&gt;Bài 04&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Giới thiệu sơ qua về một số ORM phổ biến : Sequelize&lt;/li&gt;&#xA;&lt;li&gt;Tìm hiểu về ActiveRecord Pattern&lt;/li&gt;&#xA;&lt;li&gt;Ứng dụng để tạo database schema với Sequelize trong NestJS&lt;/li&gt;&#xA;&lt;li&gt;Ứng dụng thêm,xóa,sửa,tìm kiếm với Model cho PetCategory&lt;/li&gt;&#xA;&lt;li&gt;Ứng dụng để tạo data seed trong NestJS&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;cấu-hình-cho-nestjs-làm-với-với-mysql-thông-qua-sequelize&#34;&gt;Cấu hình cho NestJS làm với với MySQL thông qua Sequelize&lt;/h3&gt;&#xA;&lt;p&gt;Đầu tiên bạn cần tạo database trước&#xA;Database name : &lt;strong&gt;nestjs_tutorial_2023&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Khóa học NestJS Bài 03 - Controllers &amp; Views</title>
      <link>http://localhost:1313/post/khoa-hoc-nestjs-bai03/</link>
      <pubDate>Wed, 21 Jun 2023 14:59:42 +0700</pubDate>
      <guid>http://localhost:1313/post/khoa-hoc-nestjs-bai03/</guid>
      <description>&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/misostack/nestjs-tutorial-2023/tree/lession03&#34;&gt;Lession 03 Source Code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bài-03&#34;&gt;Bài 03&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Tìm hiểu về module trong NestJS - ứng dụng xây dựng cấu trúc thư mục cho Pet Website&lt;/li&gt;&#xA;&lt;li&gt;Tìm hiểu về EJS và cách tạo layout chung&lt;/li&gt;&#xA;&lt;li&gt;Làm việc với form và kiểm tra dữ liệu đầu vào&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;tổng-quan&#34;&gt;Tổng quan&lt;/h3&gt;&#xA;&lt;h4 id=&#34;mô-hình-mvc&#34;&gt;Mô hình MVC&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31009750/250263049-03852064-b404-40a9-8292-8d14cdf48138.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Phía trên mô hình luồng dữ liệu từ khi người dùng thực hiện yêu cầu cho đến khi nhận được kết quả.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Khóa học Nestjs - Bài 02 - Giới thiệu mô hình MVC</title>
      <link>http://localhost:1313/post/khoa-hoc-nestjs-bai-02/</link>
      <pubDate>Tue, 20 Jun 2023 14:57:33 +0700</pubDate>
      <guid>http://localhost:1313/post/khoa-hoc-nestjs-bai-02/</guid>
      <description>&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/misostack/nestjs-tutorial-2023/tree/day02&#34;&gt;Session 002 Source Code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bài-02&#34;&gt;Bài 02&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Phân tích yêu cầu thiết kế sơ bộ&lt;/li&gt;&#xA;&lt;li&gt;Thiết lập cấu trúc dự án&lt;/li&gt;&#xA;&lt;li&gt;Giới thiệu tổng quan về các lớp trong mô hình MVC và code thực hành&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;phân-tích-yêu-cầu&#34;&gt;Phân tích yêu cầu&lt;/h3&gt;&#xA;&lt;h4 id=&#34;sitemap&#34;&gt;Sitemap&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31009750/247061383-15931be5-9bb5-4e85-9577-8fa6faa3f16f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;functional-details&#34;&gt;Functional details&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31009750/247061467-18d4c3e4-f726-47e9-9b83-35136cfbb876.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;thiết-kế-cơ-sở-dữ-liệu&#34;&gt;Thiết kế cơ sở dữ liệu&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31009750/247068026-284c4402-5853-479e-b086-647db777d17b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;thiết-lập-cấu-trúc-dự-án&#34;&gt;Thiết lập cấu trúc dự án&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Tạo 1 dự án mới với NestJS&lt;/li&gt;&#xA;&lt;li&gt;Cấu trúc thư mục dự án theo cấu trúc module và mô hình MVC&lt;/li&gt;&#xA;&lt;li&gt;Debug dự án NestJS với VSCode&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;tạo-1-dự-án-mới-với-nestjs&#34;&gt;Tạo 1 dự án mới với NestJS&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nest new nestjs-tutorial-2023 --skip-install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd nestjs-tutorial-2023&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm i&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31009750/247071423-19b685cc-56ea-463b-be0a-4d0de94993ef.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Khóa học NestJS - Bài 01 - Lộ trình các bài học về NestJS Framework</title>
      <link>http://localhost:1313/post/khoa-hoc-nestjs/</link>
      <pubDate>Fri, 19 May 2023 22:00:00 +0700</pubDate>
      <guid>http://localhost:1313/post/khoa-hoc-nestjs/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Toàn bộ mã nguồn của khóa học này đều được công khai trên github tại &lt;a href=&#34;//github.com/misostack/nestjs-tutorial-2023&#34;&gt;NestJS Tutorial 2023&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Trước khi bắt đầu nội dung chi tiết của khóa học này, tôi sẽ liệt kê một số câu hỏi thường gặp, cũng như câu trả lời của nó.&lt;/p&gt;&#xA;&lt;h2 id=&#34;lời-nói-đầu&#34;&gt;Lời nói đầu&lt;/h2&gt;&#xA;&lt;h3 id=&#34;câu-hỏi-số-1--tại-sao-khóa-học-này-xuất-hiện&#34;&gt;Câu hỏi số 1 : Tại sao khóa học này xuất hiện?&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;h3 id=&#34;câu-trả-lời-là-niềm-tự-hào-dân-tộc&#34;&gt;Câu trả lời là &amp;ldquo;Niềm tự hào dân tộc&amp;rdquo;.&lt;/h3&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Phần lớn tài liệu dành cho lập trình viên được viết bằng &amp;ldquo;Tiếng Anh&amp;rdquo;, tuy nhiên một số quốc gia như &amp;ldquo;Trung Quốc&amp;rdquo;, &amp;ldquo;Nhật Bản&amp;rdquo;, &amp;ldquo;Hàn Quốc&amp;rdquo;, hay các nước lớn như &amp;ldquo;Pháp&amp;rdquo;, &amp;ldquo;Đức&amp;rdquo; đều có những tài liệu lập trình được địa phương hóa, với rất nhiều kiến thức chuyên sâu, cũng như các chú giải/kinh nghiệm của người đi trước được truyền tải lại.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build Restful Api With Nestjs the Right Way</title>
      <link>http://localhost:1313/post/build-restful-api-with-nestjs-the-right-way/</link>
      <pubDate>Sun, 30 Oct 2022 06:00:00 +0700</pubDate>
      <guid>http://localhost:1313/post/build-restful-api-with-nestjs-the-right-way/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Foreword&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;If you are new with NestJS or you have been worked with it for several projects, this post is for you. In this article, I&amp;rsquo;ll share with you the real world process to build a Restful API from scratch with NestJS&lt;/p&gt;&#xA;&lt;p&gt;Okie, let&amp;rsquo;s start. Imagination, we&amp;rsquo;ve already have detail specifications.&#xA;This is our requirements in this sample:&lt;/p&gt;&#xA;&lt;p&gt;Create Restful API for a image storage service that allow:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Users can register to the system. They need to verify their account before using it (via email).&lt;/li&gt;&#xA;&lt;li&gt;Users can only use the system if they have an active account&lt;/li&gt;&#xA;&lt;li&gt;Users can upload images with png,jpg,jpeg format. The maximum size is 5MB&lt;/li&gt;&#xA;&lt;li&gt;User&amp;rsquo;s images won&amp;rsquo;t be public unless they created a shared link and share with other people.&lt;/li&gt;&#xA;&lt;li&gt;User&amp;rsquo;s images can be used on other websites&lt;/li&gt;&#xA;&lt;li&gt;A user has maximum 100 images.&lt;/li&gt;&#xA;&lt;li&gt;A system will delete unused image(unused more than 1 year) automatically every weekends.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Infrastructure requirements:&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Best Way to Upload File in Nestjs</title>
      <link>http://localhost:1313/post/the-best-way-to-upload-file-in-nestjs/</link>
      <pubDate>Wed, 10 Aug 2022 17:01:06 +0700</pubDate>
      <guid>http://localhost:1313/post/the-best-way-to-upload-file-in-nestjs/</guid>
      <description>&lt;p&gt;In the last topic, we&amp;rsquo;ve already learn how to upload file with Multer.&#xA;In this post, I wanna share with you the NestJS&amp;rsquo;s best practice to upload file.&lt;/p&gt;&#xA;&lt;p&gt;Firstly, we need to install type safe for multer in case you didn&amp;rsquo;t.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm i -D @types/multer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In real world projects, we may have to allow user upload a single file or multiple files.&#xA;With multer we need to define with the target route, we will upload single or multiple.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nestjs Request and Response Object</title>
      <link>http://localhost:1313/post/nestjs-request-and-response-object/</link>
      <pubDate>Fri, 05 Aug 2022 10:06:04 +0700</pubDate>
      <guid>http://localhost:1313/post/nestjs-request-and-response-object/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All of demo source code you can find our in github &lt;a href=&#34;https://github.com/misostack/finance.api.sonnm.com&#34;&gt;nestjs boilerplate&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;As you&amp;rsquo;ve known, in a request we will have:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Route Params ( included in URL )&lt;/li&gt;&#xA;&lt;li&gt;Query Params ( included in URL )&lt;/li&gt;&#xA;&lt;li&gt;Body ( json/form-data/multipart/form-data )&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;There are 2 ways to get these values&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;library-specific-approach---express&#34;&gt;Library specific Approach - Express&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Controller&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Res&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nestjs/common&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;express&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@Controller&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;examples&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExamplesController&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;@Post&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;request-object/express/:email&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;exampleRequestObjectExpress&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;@Req&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Request&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;@Res&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Response&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;responseData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;approach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;express&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;routeParams&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;req.params&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;queryParams&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;req.query&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;req.body&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;req.headers&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;req.ip&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;ips&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;req.ips&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;hostname&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;req.hostname&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;subdomain&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;req.subdomains&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;responseData&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;standard-using-nestjs-decoratos&#34;&gt;Standard using NestJS Decoratos&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Controller&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Delete&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Headers&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Ip&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Param&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Patch&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Post&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Query&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Req&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Res&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nestjs/common&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@nestjs/common&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;express&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@Controller&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;examples&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ExamplesController&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;@Post&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;request-object/standard/:email&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;exampleRequestObjectStandard&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;@Body&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;@Query&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;@Param&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;@Headers&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;@Ip&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;responseData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;approach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;standard&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;routeParams&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;queryParams&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;query&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;body&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;headers&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;responseData&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s more clean right? We only have to work with JSON object, NestJS will do serialization part for us&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nestjs Pipes</title>
      <link>http://localhost:1313/post/nestjs-pipes/</link>
      <pubDate>Thu, 04 Aug 2022 10:46:09 +0700</pubDate>
      <guid>http://localhost:1313/post/nestjs-pipes/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All of demo source code you can find our in github &lt;a href=&#34;https://github.com/misostack/finance.api.sonnm.com&#34;&gt;nestjs boilerplate&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is Pipe?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A pipe is a class annotated with the @Injectable() decorator, which implements the PipeTransform interface&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Pipes operate on the arguments being processed by a controller route handler.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Nest interposes a pipe just before a method is invoked, and the pipe receives the arguments destined for the method and operates on them&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;So that, we can use pipes in two typical use cases:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Validate Request Input in Nestjs</title>
      <link>http://localhost:1313/post/validate-request-input-in-nestjs/</link>
      <pubDate>Fri, 29 Jul 2022 15:17:27 +0700</pubDate>
      <guid>http://localhost:1313/post/validate-request-input-in-nestjs/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All of demo source code you can find our in github &lt;a href=&#34;https://github.com/misostack/finance.api.sonnm.com&#34;&gt;nestjs boilerplate&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;It is best practice to validate the correctness of any data sent into a web application&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;There are several libraries support us to verify data :&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/jsonschema&#34;&gt;json schema&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://joi.dev/api/?v=17.6.0#version&#34;&gt;joi&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/validator&#34;&gt;validator&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;And in typescript, we have a special library that support decorator&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/typestack/class-validator&#34;&gt;Class Validator&lt;/a&gt; - internally uses validator.js to perform validation. Class-validator works on both browser and node.js platforms&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s dive in class validator usage example. Let&amp;rsquo;s say that we have a requirement for example entity&amp;rsquo;s data like this&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nestjs Provider</title>
      <link>http://localhost:1313/post/nestjs-provider/</link>
      <pubDate>Thu, 28 Jul 2022 14:41:08 +0700</pubDate>
      <guid>http://localhost:1313/post/nestjs-provider/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All of demo source code you can find our in github &lt;a href=&#34;https://github.com/misostack/finance.api.sonnm.com&#34;&gt;nestjs boilerplate&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Many of the basic Nest classes may be treated as a provider:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Services&lt;/li&gt;&#xA;&lt;li&gt;Repositories&lt;/li&gt;&#xA;&lt;li&gt;Factories&lt;/li&gt;&#xA;&lt;li&gt;Helpers&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;The main idea of a provider is that it can be injected as a dependency&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This means NestJS will be act as a container and creating relationship between objects and wire them up at runtime&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;When creating a provider, we should consider these aspects&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Developer Your Rest Api With Nestjs</title>
      <link>http://localhost:1313/post/developer-your-rest-api-with-nestjs/</link>
      <pubDate>Tue, 12 Jul 2022 11:39:11 +0700</pubDate>
      <guid>http://localhost:1313/post/developer-your-rest-api-with-nestjs/</guid>
      <description>&lt;h2 id=&#34;ứng-dụng&#34;&gt;Ứng dụng&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Xây dựng REST API cung cấp dữ liệu thời gian thực giá vàng&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31009750/179179969-d1b9fbb0-0b8c-45a1-9892-8d151d6b67b5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;tính-năng-cập-nhật-giá-vàng&#34;&gt;Tính năng cập nhật giá vàng&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Cập nhật giá vàng theo ngày : nhập thông thường&lt;/li&gt;&#xA;&lt;li&gt;Cập nhật giá vàng hàng loạt: import tập tin excel theo định dạng&lt;/li&gt;&#xA;&lt;li&gt;Cập nhật giá vàng tự động: thiết lập link liên kết lấy giá vàng, khoảng thời gian lấy&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;tính-năng-hiển-thị-giá-vàng&#34;&gt;Tính năng hiển thị giá vàng&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Dạng hiện thị : dạng bảng hoặc dạng biểu đồ&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
