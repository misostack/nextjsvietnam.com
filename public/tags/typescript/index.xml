<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on Useful NodeJS Tricks, JavaScript Tips, Tricks and Best Practices</title>
    <link>https://nextjsvietnam.com/tags/typescript/</link>
    <description>Recent content in typescript on Useful NodeJS Tricks, JavaScript Tips, Tricks and Best Practices</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Aug 2022 15:07:40 +0700</lastBuildDate><atom:link href="https://nextjsvietnam.com/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Use Typescript Path Alias in Loopback 4</title>
      <link>https://nextjsvietnam.com/post/how-to-use-typescript-path-alias-in-loopback-4/</link>
      <pubDate>Fri, 05 Aug 2022 15:07:40 +0700</pubDate>
      
      <guid>https://nextjsvietnam.com/post/how-to-use-typescript-path-alias-in-loopback-4/</guid>
      <description>The problem In Node.js (or TS/JS in general) you can import single modules into your code. This might look the following:
import { Example } from &amp;#34;../example/model&amp;#34;; import { Article } from &amp;#34;../article/model&amp;#34;; The problem we have here is that the deeper your project tree is the more &amp;lsquo;../&amp;rsquo; are required to access modules in higher layers. Actually, this doesn&amp;rsquo;t look very beautiful to be honest. Fortunately we can change that.</description>
    </item>
    
  </channel>
</rss>
