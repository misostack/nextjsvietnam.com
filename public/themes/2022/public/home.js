/*! For license information please see home.js.LICENSE.txt */
(()=>{var i={446:()=>{var i;(i=jQuery).fn.theiaStickySidebar=function(t){function e(t,e){return!0===t.initialized||!(i("body").width()<t.minWidth)&&(function(t,e){t.initialized=!0,0===i("#theia-sticky-sidebar-stylesheet-"+t.namespace).length&&i("head").append(i('<style id="theia-sticky-sidebar-stylesheet-'+t.namespace+'">.theiaStickySidebar:after {content: ""; display: table; clear: both;}</style>')),e.each((function(){var e={};if(e.sidebar=i(this),e.options=t||{},e.container=i(e.options.containerSelector),0==e.container.length&&(e.container=e.sidebar.parent()),e.sidebar.parents().css("-webkit-transform","none"),e.sidebar.css({position:e.options.defaultPosition,overflow:"visible","-webkit-box-sizing":"border-box","-moz-box-sizing":"border-box","box-sizing":"border-box"}),e.stickySidebar=e.sidebar.find(".theiaStickySidebar"),0==e.stickySidebar.length){var a=/(?:text|application)\/(?:x-)?(?:javascript|ecmascript)/i;e.sidebar.find("script").filter((function(i,t){return 0===t.type.length||t.type.match(a)})).remove(),e.stickySidebar=i("<div>").addClass("theiaStickySidebar").append(e.sidebar.children()),e.sidebar.append(e.stickySidebar)}e.marginBottom=parseInt(e.sidebar.css("margin-bottom")),e.paddingTop=parseInt(e.sidebar.css("padding-top")),e.paddingBottom=parseInt(e.sidebar.css("padding-bottom"));var n=e.stickySidebar.offset().top,r=e.stickySidebar.outerHeight();function s(){e.fixedScrollTop=0,e.sidebar.css({"min-height":"1px"}),e.stickySidebar.css({position:"static",width:"",transform:"none"})}e.stickySidebar.css("padding-top",1),e.stickySidebar.css("padding-bottom",1),n-=e.stickySidebar.offset().top,r=e.stickySidebar.outerHeight()-r-n,0==n?(e.stickySidebar.css("padding-top",0),e.stickySidebarPaddingTop=0):e.stickySidebarPaddingTop=1,0==r?(e.stickySidebar.css("padding-bottom",0),e.stickySidebarPaddingBottom=0):e.stickySidebarPaddingBottom=1,e.previousScrollTop=null,e.fixedScrollTop=0,s(),e.onScroll=function(e){if(e.stickySidebar.is(":visible"))if(i("body").width()<e.options.minWidth)s();else{if(e.options.disableOnResponsiveLayouts&&e.sidebar.outerWidth("none"==e.sidebar.css("float"))+50>e.container.width())return void s();var a=i(document).scrollTop(),n="static";if(a>=e.sidebar.offset().top+(e.paddingTop-e.options.additionalMarginTop)){var r,d=e.paddingTop+t.additionalMarginTop,c=e.paddingBottom+e.marginBottom+t.additionalMarginBottom,p=e.sidebar.offset().top,b=e.sidebar.offset().top+(k=e.container,v=k.height(),k.children().each((function(){v=Math.max(v,i(this).height())})),v),l=0+t.additionalMarginTop;r=e.stickySidebar.outerHeight()+d+c<i(window).height()?l+e.stickySidebar.outerHeight():i(window).height()-e.marginBottom-e.paddingBottom-t.additionalMarginBottom;var f=p-a+e.paddingTop,h=b-a-e.paddingBottom-e.marginBottom,u=e.stickySidebar.offset().top-a,g=e.previousScrollTop-a;"fixed"==e.stickySidebar.css("position")&&"modern"==e.options.sidebarBehavior&&(u+=g),"stick-to-top"==e.options.sidebarBehavior&&(u=t.additionalMarginTop),"stick-to-bottom"==e.options.sidebarBehavior&&(u=r-e.stickySidebar.outerHeight()),u=g>0?Math.min(u,l):Math.max(u,r-e.stickySidebar.outerHeight()),u=Math.max(u,f),u=Math.min(u,h-e.stickySidebar.outerHeight());var S=e.container.height()==e.stickySidebar.outerHeight();n=!S&&u==l||!S&&u==r-e.stickySidebar.outerHeight()?"fixed":a+u-e.sidebar.offset().top-e.paddingTop<=t.additionalMarginTop?"static":"absolute"}if("fixed"==n){var y=i(document).scrollLeft();e.stickySidebar.css({position:"fixed",width:o(e.stickySidebar)+"px",transform:"translateY("+u+"px)",left:e.sidebar.offset().left+parseInt(e.sidebar.css("padding-left"))-y+"px",top:"0px"})}else if("absolute"==n){var m={};"absolute"!=e.stickySidebar.css("position")&&(m.position="absolute",m.transform="translateY("+(a+u-e.sidebar.offset().top-e.stickySidebarPaddingTop-e.stickySidebarPaddingBottom)+"px)",m.top="0px"),m.width=o(e.stickySidebar)+"px",m.left="",e.stickySidebar.css(m)}else"static"==n&&s();"static"!=n&&1==e.options.updateSidebarHeight&&e.sidebar.css({"min-height":e.stickySidebar.outerHeight()+e.stickySidebar.offset().top-e.sidebar.offset().top+e.paddingBottom}),e.previousScrollTop=a}var k,v},e.onScroll(e),i(document).on("scroll."+e.options.namespace,function(i){return function(){i.onScroll(i)}}(e)),i(window).on("resize."+e.options.namespace,function(i){return function(){i.stickySidebar.css({position:"static"}),i.onScroll(i)}}(e)),"undefined"!=typeof ResizeSensor&&new ResizeSensor(e.stickySidebar[0],function(i){return function(){i.onScroll(i)}}(e))}))}(t,e),!0)}function o(i){var t;try{t=i[0].getBoundingClientRect().width}catch(i){}return void 0===t&&(t=i.width()),t}return(t=i.extend({containerSelector:"",additionalMarginTop:0,additionalMarginBottom:0,updateSidebarHeight:!0,minWidth:0,disableOnResponsiveLayouts:!0,sidebarBehavior:"modern",defaultPosition:"relative",namespace:"TSS"},t)).additionalMarginTop=parseInt(t.additionalMarginTop)||0,t.additionalMarginBottom=parseInt(t.additionalMarginBottom)||0,function(t,o){e(t,o)||(console.log("TSS: Body width smaller than options.minWidth. Init is delayed."),i(document).on("scroll."+t.namespace,function(t,o){return function(a){e(t,o)&&i(this).unbind(a)}}(t,o)),i(window).on("resize."+t.namespace,function(t,o){return function(a){e(t,o)&&i(this).unbind(a)}}(t,o)))}(t,this),this}}},t={};function e(o){var a=t[o];if(void 0!==a)return a.exports;var n=t[o]={exports:{}};return i[o](n,n.exports,e),n.exports}e.n=i=>{var t=i&&i.__esModule?()=>i.default:()=>i;return e.d(t,{a:t}),t},e.d=(i,t)=>{for(var o in t)e.o(t,o)&&!e.o(i,o)&&Object.defineProperty(i,o,{enumerable:!0,get:t[o]})},e.o=(i,t)=>Object.prototype.hasOwnProperty.call(i,t),(()=>{"use strict";var i;e(446),(i=jQuery)((()=>{i(".content, .sidebar").theiaStickySidebar({additionalMarginTop:120,minWidth:1024})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,