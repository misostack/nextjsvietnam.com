<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Useful NodeJS Tricks, JavaScript Tips, Tricks and Best Practices</title><link>https://nextjsvietnam.com/post/</link><description>Recent content in Posts on Useful NodeJS Tricks, JavaScript Tips, Tricks and Best Practices</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 May 2024 20:59:44 +0700</lastBuildDate><atom:link href="https://nextjsvietnam.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Flexbox and Real World Examples</title><link>https://nextjsvietnam.com/post/flexbox-and-real-world-examples/</link><pubDate>Wed, 01 May 2024 20:59:44 +0700</pubDate><guid>https://nextjsvietnam.com/post/flexbox-and-real-world-examples/</guid><description>Flexbox is a powerful CSS layout mode that allows for the efficient arrangement of items within a container, even when their size is unknown or dynamic. Flexbox makes it easy to align elements, distribute space, and handle various alignment challenges that were tricky with older CSS properties.
Key Concepts of Flexbox Flex Container: The element that you apply display: flex or display: inline-flex to becomes the flex container. Its direct children become flex items.</description></item><item><title>Nestjs Passing Data Between Layers in Domain Driven Design</title><link>https://nextjsvietnam.com/post/nestjs-passing-data-between-layers-in-ddd/</link><pubDate>Sat, 27 Apr 2024 14:31:26 +0700</pubDate><guid>https://nextjsvietnam.com/post/nestjs-passing-data-between-layers-in-ddd/</guid><description>We determined that we will have 3 layers: Presentation(Controller), Service, Data Layer(Repository). And the flow is:
Controllers will inject Services to use Services will inject Repository to use. So when passing data between layers, the dto/models will be use should belongs to which layers.
Top-Down Approach (1st Option) Controllers Layer: Responsibility: Handle incoming HTTP requests, delegate business logic to services. Data Transfer: Interact with DTOs provided by services for transferring data between the client and the server.</description></item><item><title>Microservice Headfirst</title><link>https://nextjsvietnam.com/post/microservice-headfirst/</link><pubDate>Fri, 19 Apr 2024 08:27:33 +0700</pubDate><guid>https://nextjsvietnam.com/post/microservice-headfirst/</guid><description>In theory, you will split your monolith application in to microservices like this
And the biggest issue we have to face is Data Management Between Services
In this article, we will go through 2 sections to help you dive in deeper in microservice world.
Microservice Pattern Practice: build a shopping website with microservice architecture Microservice Pattern Database Per Service We want each service to run independently of other services Database schema/structure might change unexpectedly Some services might function more efficiently with different types of DB&amp;rsquo;s (sql, non-sql) Some issues we may got if we don&amp;rsquo;t apply this pattern</description></item><item><title>[React Native Examples] Setup Working Place for React Native Developer</title><link>https://nextjsvietnam.com/post/react-native-examples-setup-working-place-for-react-native-developer/</link><pubDate>Thu, 28 Mar 2024 08:51:55 +0700</pubDate><guid>https://nextjsvietnam.com/post/react-native-examples-setup-working-place-for-react-native-developer/</guid><description>Forewords What is React Native? Technical View Views JSX Components are compiled to Native Views, not the javascript logic code.
Components are compiled
What about JS Logic Code? Expo CLI vs React Native CLI Conclusion:
You can start with expo cli because of easy working flow and less setup With expo, you can test with native functions like camera with devices more easier. You can always switch from expo cli to react native cli just by using &amp;ldquo;eject&amp;rdquo; With React Native CLI setup, you can mix between js code and platform native code, such as: kotline or swift React Natve CLI required more setup Setup working environment Install Android Studio Create new React Native project with expo VSCode Extension and setup Debug Setup Android Studio To publish your app for testing Setup Android Studio To publish your app for production Install Android Studio Download the latest Android Studio version at official link Then you can create a new virtual device(which will be used to run for testing your React Native app) And you get this virtual device on your screen</description></item><item><title>Reactjs Examples - The best VSCode Extensions for ReactJS Developers 2024</title><link>https://nextjsvietnam.com/post/reactjs-examples-vs-code-extensions/</link><pubDate>Thu, 01 Feb 2024 08:58:18 +0700</pubDate><guid>https://nextjsvietnam.com/post/reactjs-examples-vs-code-extensions/</guid><description>ES7+ React/Redux/React-Native snippets Extension type: Code Snippets</description></item><item><title>Aws Lab Series Build and Deploy Rest Api</title><link>https://nextjsvietnam.com/post/aws-lab-series-build-and-deploy-rest-api/</link><pubDate>Sat, 06 Jan 2024 08:56:51 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-lab-series-build-and-deploy-rest-api/</guid><description>First of all we have figure out our requirements and materials that we have.
Overview of requirements Overview of the API Service Our Rest API service is written in NodeJS Use Relational Database There is a job queue inside the service The service store image on disk User can upload images via this service User data must be encrypted What system needs We have a domain on godaddy and plan to use: api.</description></item><item><title>Aws Lab Series Foreword</title><link>https://nextjsvietnam.com/post/aws-lab-series-foreword/</link><pubDate>Sat, 06 Jan 2024 08:46:59 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-lab-series-foreword/</guid><description>A good architecture include these pillars</description></item><item><title>Aws Series Migration</title><link>https://nextjsvietnam.com/post/aws-series-migration/</link><pubDate>Thu, 04 Jan 2024 10:16:42 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-migration/</guid><description>Moving Data to AWS Cloud Snow Family Snowcone 8TB of storage Snowball Edge 48TB to 81 TB in storage One time migration is the best suite Snowmobile 100TB in storage Storage Gateway Hybrid Cloud Storage Service help you merge on-premises resources with the cloud It can help with a one-time migration and long-term pairing of your architecture with AWS File Gateway Caching local files NFS or SMB mount Keep a local copy of recently used files Extend on-premises storage Helps with migrations to AWS Volume Gateway Backup Drives iSCSI mount Cached or stored mode Create EBS snapshots Perfect for backup or migration Tape Gateway Ditch with tapes Replace physical tapes Doesn&amp;rsquo;t change current workflow Encrypted communication AWS DataSync Agent-based solution for migrating on-premises storage to AWS.</description></item><item><title>Aws Series Governance</title><link>https://nextjsvietnam.com/post/aws-series-governance/</link><pubDate>Wed, 03 Jan 2024 23:05:24 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-governance/</guid><description>Account Types Management Account is the primary account that hosts and manage organization (payer account) Member Account is all AWS accounts that belong to the organization Features Consolidated Billing Usage Discounts Shared Savings Main concepts Multi Account Tag Enforcement Organization Unit(ou): group of accounts Service Controler Policies(SCP): JSON policies that get applied to OUs or accounts to restrict actions that are or are not allowed Management Account: SCP do affect the management account like they do all member accounts.</description></item><item><title>Aws Series Caching</title><link>https://nextjsvietnam.com/post/aws-series-caching/</link><pubDate>Wed, 03 Jan 2024 15:20:47 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-caching/</guid><description>What can we cache:
External: data that&amp;rsquo;s going to be returned to our users Internal: eg, we can speed up our databases, the less we talk to the database, the better. Caching solutions
Global Caching with CloudFront CDN service, help to reduce latency and provide high transfer speed using AWS edge locations. Https is default Global distribution Can be used to front AWS endpoint along with non-AWS applications Expiring content with TTL configuration Elastic Cache A managed version of two opensource: memcached and redis And for RDS DAX DynamoDB Accelerator In Memory Cache: ml to nano Live inside VPC You can control size of node, TTL, IP Caching with Global Accelerators A service that send user&amp;rsquo;s traffic to the global AWS Infrastructure via accelerators.</description></item><item><title>Aws Series Automation</title><link>https://nextjsvietnam.com/post/aws-series-automation/</link><pubDate>Wed, 03 Jan 2024 14:40:26 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-automation/</guid><description>Automation Benefit:
Time Consistency Security CloudFormation Allows you to provision resources quickly and consistently, and manage them throughout their lifecycles, by treating infrastructure as code. Elastic Beanstalk Easy-to-use all in one service for deploying and scaling web applications and services developed with a variety of supported languages System Manager Gives you the ability to easily patch, update, manage and configure your EC2 instances along with on-premise architecture.</description></item><item><title>Aws Series Security</title><link>https://nextjsvietnam.com/post/aws-series-security/</link><pubDate>Wed, 03 Jan 2024 10:12:10 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-security/</guid><description>DDos Attack SYN Floods Attack SYN Flood use TCP 3-Way Handshake to attack the servers
Some concepts
SYN(Synchronize Sequence Number) ACK(Acknowledgement) TCP 3-Way Handshake Process
How SYN floods attack work?
Uses the built-in patience of the TCP stacks to overwhelm a server by sending a large number of SYN packets and then ignoring the SYN-ACKs returned by the server. This causes the server to use up resources waiting for a set of amount time for the anticipated ACK that should come from a legitimate client.</description></item><item><title>Aws Series Serverless Computing</title><link>https://nextjsvietnam.com/post/aws-series-serverless-computing/</link><pubDate>Mon, 01 Jan 2024 15:49:26 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-serverless-computing/</guid><description>AWS Lambda Serverless compute service that lets you run code without provisioning or managing the underlying servers. So you can focus on code, not the servers! Automated scaling
Lambda Main features Free tier 1M requests and 400K GBs of compute per month Integrates with numerous AWS services: S3, DynamoDB, EventBridge, SQS/SNS, and Kinenis CloudWatch for Logging Set memories requirement as needed, up to 10,240 MB! CPU scales with memory Execution Length: short-term executions, limit time is 900s(15mins).</description></item><item><title>Aws Series Big Data</title><link>https://nextjsvietnam.com/post/aws-series-big-data/</link><pubDate>Sun, 31 Dec 2023 19:06:05 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-big-data/</guid><description>The 3Vs of Big Data Volume
Ranges from terabytes to petabytes of data Variety
Includes data from a wide range of sources and formats Velocity
Data needs to be collected, stored, processed, and analyzed within a short period of time Amazon Redshift Fully managed, petabyte-scale data warehouse service in cloud It&amp;rsquo;s a very large relational database traditional used in big data applications.</description></item><item><title>Happy New Year 2024</title><link>https://nextjsvietnam.com/post/happy-new-year-2024/</link><pubDate>Sun, 31 Dec 2023 18:25:50 +0700</pubDate><guid>https://nextjsvietnam.com/post/happy-new-year-2024/</guid><description>#!/usr/bin/env node const words = [&amp;#34;Happy&amp;#34;, &amp;#34;New&amp;#34;, &amp;#34;Year&amp;#34;, &amp;#34;2024&amp;#34;]; const message = {}; words.map((w, index) =&amp;gt; { Reflect.set(message, index, w); }); let happyNewYearMessage2024 = &amp;#34;&amp;#34;; Reflect.ownKeys(message) .sort() .forEach((index) =&amp;gt; { happyNewYearMessage2024 = `${happyNewYearMessage2024}${Reflect.get( message, index )}`; }); console.log(happyNewYearMessage2024);</description></item><item><title>Aws Series Decoupling Workflows</title><link>https://nextjsvietnam.com/post/aws-series-decoupling-workflows/</link><pubDate>Sat, 30 Dec 2023 23:48:50 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-decoupling-workflows/</guid><description>The issue with tight coupling The solution : loose coupling Simple Queue Service(SQS) SQS is fully managed message queuing service that enables you to decouple and scale microservices, distributed systems, and serverless applications. A message queue that allows asynchronous processing of work. One resource write a message to an SQS queue, and then another resource retrieve that messages from SQS Some important settings Delivery delay: default is 0, max value is 15 minutes Message size: up to 256KB of text in any format Encryption: messages are encrypted in transit by default, but you can add at-rest Message retention: default is 4 days, can be set between 1 minutes and 14 days.</description></item><item><title>Aws Series High Availability and Scaling</title><link>https://nextjsvietnam.com/post/aws-series-high-availability-and-scaling/</link><pubDate>Sat, 30 Dec 2023 09:31:02 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-high-availability-and-scaling/</guid><description>Vertical Scaling vs Horizontal Scaling Vertical Scaling Eg:
Increase your EC2 RAM Increase your EC2 CPU &amp;hellip; Horizontal Scaling Eg:
Add new EC2 Add new EC2 &amp;hellip; But we dont' only scale EC2, it should include other parts:
Database VPC AZ &amp;hellip; The 3W&amp;rsquo;s of Scaling What do we scale?
What sort of resource, we&amp;rsquo;re going to scale. How do we define template?</description></item><item><title>Aws Series Cloud Watch</title><link>https://nextjsvietnam.com/post/aws-series-cloud-watch/</link><pubDate>Fri, 29 Dec 2023 20:30:53 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-cloud-watch/</guid><description>CloudWatch is an monitoring and observability platform that was designed to give us insight into our AWS architecture. It allows us to monitor multiple levels of our applications and identify potential issues
CloudWatch Features System Metrics Application Metrics : information inside EC2 Alarms: Alarms us when something&amp;rsquo;s wrong Types of Metrics Application Monitoring Using CloudWatch Logs What do we do with our logs which comes from: EC2, RDS, LAMBDA, CloudTrail, On-Premises</description></item><item><title>Aws Series Elb</title><link>https://nextjsvietnam.com/post/aws-series-elb/</link><pubDate>Fri, 29 Dec 2023 17:03:17 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-elb/</guid><description>Elastic Load Balancing
Automatically distributes incoming application traffic across multiple targets, such as Amazon EC Instances. 4 Diffrent Types of Load Balancers
Application Load Balancer: http/https traffic, operate at layer 7 (Intelligence) Network Load Balancer: operating at connection level (layer 4) on OSI Model (Performance) Gateway Load Balancers: operating at network level (layer 3 on OSI Model) (inline Virtual Appliance Load Balancing) Classic Load Balancers: http/https traffic, use layer 7 specific feature X-Forwarded, sticky session, classic/dev/test Load Balancer routes request only to the healthy instances</description></item><item><title>Aws Series Route 53</title><link>https://nextjsvietnam.com/post/aws-series-route-53/</link><pubDate>Fri, 29 Dec 2023 10:30:59 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-route-53/</guid><description>Route 53 is Amazon&amp;rsquo;s DNS service. It allows you to register domain names, create hosted zones, and manage and create DNS records
DNS operates on port 53 -&amp;gt; so that&amp;rsquo;s why it is called Route 53
SOA(Start of Authority) Record:
nslookup -q=soa jsbase.dev # Then Non-authoritative answer: jsbase.dev origin = izabella.ns.cloudflare.com mail addr = dns.cloudflare.com serial = 2324118412 refresh = 10000 retry = 2400 expire = 604800 minimum = 1800 NS(Name Server) Record: include IP of DNS Server and information about that domain</description></item><item><title>Aws Series Compute</title><link>https://nextjsvietnam.com/post/aws-series-compute/</link><pubDate>Thu, 28 Dec 2023 10:27:36 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-compute/</guid><description>3. Compute 3.1. EC2 VM but hosted on Amazon Infrastructure
3.1..1 Amazon EC2 Pricing Options: On Demand
Pay by the hour or the second, depend on instance type Short term Flexible Testing the water Reversed capacity:
Predictable usage Specific capacity requirement Pay upfront for 1 or 3 years Standard RIs - up to 72% off the on-demand price. Convertible RIs - 54% off the on-demand price.</description></item><item><title>Aws Series Networking</title><link>https://nextjsvietnam.com/post/aws-series-networking/</link><pubDate>Thu, 28 Dec 2023 10:22:54 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-series-networking/</guid><description>6. Networking 6.1. VPC Virtual Private Cloud Fully customized your network Create a hardward Virtual Private Network(VPN) connection between your data center and your AWS VPC. Logical data center in AWS Consists of: internet gateway, route tables, network access control lists, subnets, security groups 1 subnet is always in 1 Availability Zone (subnet can&amp;rsquo;t span into multiple AZs) Amazon IPV4 CIDR block size must be between /16 - /24 What can we do with VPC</description></item><item><title>Aws Hand on Labs</title><link>https://nextjsvietnam.com/post/aws-hand-on-labs/</link><pubDate>Fri, 01 Dec 2023 22:15:06 +0700</pubDate><guid>https://nextjsvietnam.com/post/aws-hand-on-labs/</guid><description>Types of labs Using EC2 Roles and Instance Profiles in AWS Architecture
Scenario
You are responsible for ensuring your applications hosted in Amazon EC2 are able to securely access other AWS services. Credentials need to be rotated regularly to minimize the adverse impact of a security breach. You want to minimize the time it takes to manage these credentials. AWS IAM roles provide the ability to automatically grant instances temporary credentials without the need for manual management.</description></item><item><title>Learn Aws Practitioner Level the Right Way</title><link>https://nextjsvietnam.com/post/learn-aws-practitioner-level-the-right-way/</link><pubDate>Tue, 07 Nov 2023 08:46:51 +0700</pubDate><guid>https://nextjsvietnam.com/post/learn-aws-practitioner-level-the-right-way/</guid><description>Roadmap Introduction to AWS Services Cloud concepts Amazon EC2 AWS Compute Services 1. Introduction to AWS Services What is cloud computing? Pay as you go model? The benefits of cloud computing? Introduction of AWS Services Practice Exams 1.1. What is cloud computing? A solution to provide IT resources through internet
1.2. Summary AWS Services:
Solution to provide IT resources through internet Provide solutions for your business through internet: other aws services The benefits of Cloud Computing(costs, time, speed and agility) Deployment model: cloud-based, on-premises(private cloud), hybrid(cloud-based + on-premises) Practition Level</description></item><item><title>Nestjs Cheatsheet Mongoose Examples</title><link>https://nextjsvietnam.com/post/nestjs-cheatsheet-mongoose-examples/</link><pubDate>Sat, 07 Oct 2023 09:26:40 +0700</pubDate><guid>https://nextjsvietnam.com/post/nestjs-cheatsheet-mongoose-examples/</guid><description>When you need to work with MongoDB and NestJS, the most powerful tool that you should use is &amp;ldquo;mongoose&amp;rdquo; - the most popular ORM for MongoDB. In this article, I will show you how to use Mongoose with NestJS.
What is this topic about?
Configuration for Mongoose in NestJS Schema, Models, Documents Concepts and Examples CRUD Examples Data seeds Complex Queries: Using native query, aggregate, &amp;hellip; Transactions We can use mongoose and create your own module and integrate with NestJS or use the official package from nestjs @nestjs/mongoose.</description></item><item><title>Reactjs Fetch data the right way</title><link>https://nextjsvietnam.com/post/reactjs-fetch-data-the-right-way/</link><pubDate>Sun, 01 Oct 2023 18:38:44 +0700</pubDate><guid>https://nextjsvietnam.com/post/reactjs-fetch-data-the-right-way/</guid><description>There are several ways to manage your api calls in ReactJS Application. The main purposes are:
Fetching Caching Synchronizing and updating server state In the scope of this article, I will introduce with you several ways to do that
Use Axios as http call library and create your own service to manage api calls Use RTK Query Use Tanstack Query Use SWR Apolo Client (for GraphQL) URQL(for GraphQL) Use Axios and create your own service to manage api calls</description></item><item><title>ReactJS Cheatsheet</title><link>https://nextjsvietnam.com/post/reactjs-cheatsheet/</link><pubDate>Thu, 28 Sep 2023 22:53:54 +0700</pubDate><guid>https://nextjsvietnam.com/post/reactjs-cheatsheet/</guid><description>How to support import alias in vite? import { defineConfig } from &amp;#34;vite&amp;#34;; import react from &amp;#34;@vitejs/plugin-react&amp;#34;; import { fileURLToPath, URL } from &amp;#34;url&amp;#34;; // https://vitejs.dev/config/ export default defineConfig({ plugins: [react()], server: { port: 3015, }, resolve: { alias: [ { find: &amp;#34;@&amp;#34;, replacement: fileURLToPath(new URL(&amp;#34;./src&amp;#34;, import.meta.url)), }, ], }, }); Then you can use something like this
import &amp;#34;@/App.css&amp;#34;; import enviroment from &amp;#34;@/shared/environment&amp;#34;; import LinkManagementContainer from &amp;#34;@/containers/LinkManagementContainer&amp;#34;; But it is not enough, you also your editor understand it.</description></item><item><title>Khóa học ReactJS Bài 04 - viết test cho dự án React</title><link>https://nextjsvietnam.com/post/khoa-hoc-reactjs-bai-04-viet-test/</link><pubDate>Thu, 28 Sep 2023 08:07:25 +0700</pubDate><guid>https://nextjsvietnam.com/post/khoa-hoc-reactjs-bai-04-viet-test/</guid><description>Note: Toàn bộ mã nguồn của khóa học này đều được công khai trên github tại ReactJS Tutorial 2023
Đầu tiên, trước khi bắt đầu viết test, các anh/chị cần suy nghĩ xem dự án của mình sẽ test những gì. Cùng nhìn vào hình minh họa bên dưới sau:
Kim tự tháp kiểm thử phần mềm
Do đó, việc viết test được phân vào 3 nhóm chính:</description></item><item><title>Create New Website With Nextjs</title><link>https://nextjsvietnam.com/post/create-new-website-with-nextjs/</link><pubDate>Tue, 26 Sep 2023 12:00:00 +0700</pubDate><guid>https://nextjsvietnam.com/post/create-new-website-with-nextjs/</guid><description>In this article, we&amp;rsquo;ll go through all of nextjs&amp;rsquo;s important concepts:
How does nextjs work? Things you need to know to create a website with nextjs When you need to use nextjs? Real world examples: build a mcq website ( multichoice questions ) for developer with NextJS + SailsJS + MongoDB References: NextJS Multichoice questions Web Source Code NextJS Multichoice questions API Source Code Demo:
https://mcq-web.</description></item><item><title>Developer Philosophy</title><link>https://nextjsvietnam.com/post/developer-philosophy/</link><pubDate>Mon, 25 Sep 2023 21:13:42 +0700</pubDate><guid>https://nextjsvietnam.com/post/developer-philosophy/</guid><description>Single Responsibility Gather together the things that change for the same reasons. Separate those things that change for different reasons.
KISS ( Keep It Stupid Simple) Make things as simple as possible, but not simpler.
DRY Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.
SOLID Single Responsibility A class should only have one responsibility. Furthermore, it should only have one reason to change</description></item><item><title>The Difference Between Monolithic and Microservices Architecture</title><link>https://nextjsvietnam.com/post/the-difference-between-monolithic-and-microservices-architecture/</link><pubDate>Fri, 22 Sep 2023 15:52:14 +0700</pubDate><guid>https://nextjsvietnam.com/post/the-difference-between-monolithic-and-microservices-architecture/</guid><description>Monolith advantages and drawbacks A monolithic architecture is a traditional software development model that uses one code base to perform multiple business functions.
Advantages of Monolithic Architecture Simplicity of development : all source code is located in one place which can be quickly understood.
Simplicity of debugging : The debugging process is simple because all code is located in one place. You can easily follow the flow of a request and find an issue.</description></item><item><title>UML Use Case Diagram Cheatsheet</title><link>https://nextjsvietnam.com/post/uml-use-case-diagram-cheatsheet/</link><pubDate>Sun, 03 Sep 2023 09:39:41 +0700</pubDate><guid>https://nextjsvietnam.com/post/uml-use-case-diagram-cheatsheet/</guid><description>Four main characteristics of Use Case Diagrams:
1. Systems
A system is whatever you&amp;rsquo;re developing. It could be a website, a software component, a business process, an app, or any number of other things. You represent a system with a rectangle. 2. Actors
An actor is going to be someone or something that uses our system to achieve a goal, and they&amp;rsquo;re represented by a stick figure.</description></item><item><title>Test Driven Development for Beginner</title><link>https://nextjsvietnam.com/post/test-driven-development-for-beginner/</link><pubDate>Fri, 25 Aug 2023 19:53:36 +0700</pubDate><guid>https://nextjsvietnam.com/post/test-driven-development-for-beginner/</guid><description>Rules for Test Driven Development ( TDD ) Don’t write a line of new code unless you first have a failing automated test. Eliminate duplication Technical implications:
You must design organically, with running code providing feedback between decisions You must write your own tests Your development environment must provide rapid response to small changes Your designs must consist of many highly cohesive, loosely coupled components Cohesion Relationship inside module Connection betweeen functions Evaluate the quality that component/module focus on single responsibility Cohesion types:</description></item><item><title>The Meaning of Software Architecture</title><link>https://nextjsvietnam.com/post/the-meaning-of-software-architecture/</link><pubDate>Mon, 31 Jul 2023 10:19:02 +0700</pubDate><guid>https://nextjsvietnam.com/post/the-meaning-of-software-architecture/</guid><description>What makes up a software architecture? Software Architecture of a program or computing system is the structure of structures of the system, which comprise software elements, the externally visible properties of those elements, and the relationships between them.
Nowadays, software development methodologies focus on developing highly adaptive software, can be easily changed over time, resulting in less of a need for rigid, upfront planning. However, software architecture still consists of early design decisions that can be difficult to change later.</description></item><item><title>Nestjs Cheatsheet Sequelize Examples</title><link>https://nextjsvietnam.com/post/nestjs-cheatsheet-sequelize-examples/</link><pubDate>Mon, 24 Jul 2023 13:19:47 +0700</pubDate><guid>https://nextjsvietnam.com/post/nestjs-cheatsheet-sequelize-examples/</guid><description>The example code will be placed here
The following topics will be covered in this post.
Mapping data types Database constraints Relationship or Associations Indexing Data migrations Sub queries Transactions Real world issues The following database engines will be covered in this post.
MYSQL PostgreSQL Mapping data types Mapping data types for MYSQL in Sequelize import { AutoIncrement, Column, DataType, Model, Table, } from &amp;#34;sequelize-typescript&amp;#34;; // Refs : https://sequelize.</description></item><item><title>Game Cheat Sheet</title><link>https://nextjsvietnam.com/post/game-cheat-sheet/</link><pubDate>Fri, 21 Jul 2023 10:24:34 +0700</pubDate><guid>https://nextjsvietnam.com/post/game-cheat-sheet/</guid><description>List of games:
Age of Mythology Age of Empires 2 Age of Mythology Cheat Code Resources 1000 Food
JUNK FOOD NIGHT 1000 Wood
TROJAN HORSE FOR SALE 1000 Gold
ATM OF EREBUS Full favor
MOUNT OLYMPUS Maps Reveal Map
LAY OF THE LAND Age of Empires 2 Cheat Code Resources Grants 100,000 of each resource (you’ll need The Forgotten expansion pack for this one to work).</description></item><item><title>Khóa học ReactJS - Bài 03 - Props và States</title><link>https://nextjsvietnam.com/post/khoa-hoc-reactjs-bai-03/</link><pubDate>Thu, 13 Jul 2023 21:45:10 +0700</pubDate><guid>https://nextjsvietnam.com/post/khoa-hoc-reactjs-bai-03/</guid><description>Note: Toàn bộ mã nguồn của khóa học này đều được công khai trên github tại ReactJS Tutorial 2023
Bài 03 Tìm hiểu lý thuyết về props, state, hooks và minh hoạ Tìm hiểu lý thuyết về cách tổ chức cấu trúc dữ liệu trong ứng dụng và minh hoạ Tổng kết Trong bài trước, các anh chị đã tìm hiểu được cấu trúc 1 ứng dụng ReactJS chính là tổ hợp các component.</description></item><item><title>Khóa học NestJS - Bài 06 Hướng dẫn viết Unit Test</title><link>https://nextjsvietnam.com/post/khoa-hoc-nestjs-bai-06-viet-unit-test/</link><pubDate>Thu, 06 Jul 2023 21:52:16 +0700</pubDate><guid>https://nextjsvietnam.com/post/khoa-hoc-nestjs-bai-06-viet-unit-test/</guid><description>Lession 06 Source Code Bài 06 Giới thiệu sơ qua về Unit Test Cách test một service trong NestJS Hướng dẫn debug unit test trong NestJS Ứng dụng viết Unit Test cho PetCategory Đầu tiên, các anh/chị có thể thấy rằng sẽ có một mối quan hệ mật thiết giữa 3 thứ trong ngành này: errors/bugs(lỗi), stress(căng thẳng), tests(kiểm tra)
Càng nhiều lỗi (errors/bugs) thì càng căng thẳng(stress) Càng căng thẳng(stress) thì càng tạo ra nhiều lỗi(errors/bugs) Càng kiểm tra nhiều(test) thì càng ít lỗi(errors/bugs) do đã phát hiện và được sửa Càng ít lỗi(errors/bugs) thì càng ít cằng thẳng(stress) Do đó, việc test nhiều/kĩ sẽ đảm bảo được các anh/chị sẽ ít căng thẳng(stress) hơn.</description></item><item><title>Khóa học NestJS Bài 05 - Repository Pattern</title><link>https://nextjsvietnam.com/post/khoa-hoc-nestjs-bai-05-repository-pattern/</link><pubDate>Thu, 06 Jul 2023 21:46:31 +0700</pubDate><guid>https://nextjsvietnam.com/post/khoa-hoc-nestjs-bai-05-repository-pattern/</guid><description>Lession 05 Source Code Bài 05 Giới thiệu sơ qua về repository pattern Giới thiệu về dependency injection trong NestJS Refactor code PetCategory áp dụng repository pattern Giới thiệu sơ qua về repository pattern Trong bài trước, các anh chị có thể thấy sơ đồ sau trong mô hình MVC
Controller sử dụng trực tiếp Model của ORM để thực hiện truy vấn vào cơ sở dữ liệu.</description></item><item><title>Khóa học NestJS Bài 04 - Model and Repository Pattern</title><link>https://nextjsvietnam.com/post/khoa-hoc-nestjs-bai-04-model-and-repository-pattern/</link><pubDate>Mon, 03 Jul 2023 14:29:29 +0700</pubDate><guid>https://nextjsvietnam.com/post/khoa-hoc-nestjs-bai-04-model-and-repository-pattern/</guid><description>Source Code Lession 04 Source Code Bài 04 Giới thiệu sơ qua về một số ORM phổ biến : Sequelize Tìm hiểu về ActiveRecord Pattern Ứng dụng để tạo database schema với Sequelize trong NestJS Ứng dụng thêm,xóa,sửa,tìm kiếm với Model cho PetCategory Ứng dụng để tạo data seed trong NestJS Cấu hình cho NestJS làm với với MySQL thông qua Sequelize Đầu tiên bạn cần tạo database trước Database name : nestjs_tutorial_2023</description></item><item><title>Khóa học ReactJS - Bài 02 - Làm quen với ReactJS qua các khái niệm</title><link>https://nextjsvietnam.com/post/khoa-hoc-reactjs-bai-02/</link><pubDate>Sun, 02 Jul 2023 20:08:16 +0700</pubDate><guid>https://nextjsvietnam.com/post/khoa-hoc-reactjs-bai-02/</guid><description>Note: Toàn bộ mã nguồn của khóa học này đều được công khai trên github tại ReactJS Tutorial 2023
Bài 02 Tạo dự án mới với vite Sử dụng Env Variables Rendering: Khái niệm về component, JSX Tạo dự án mới với vite Tham khảo npm create vite@latest reactjs-tutorial-2023 -- --template react Ngoài react ra vite còn hỗ trợ 1 số template khác khi tạo dự án như: vanilla, vanilla-ts, vue, vue-ts, react, react-ts, react-swc, react-swc-ts, preact, preact-ts, lit, lit-ts, svelte, svelte-ts.</description></item><item><title>Khóa học NestJS Bài 03 - Controllers &amp; Views</title><link>https://nextjsvietnam.com/post/khoa-hoc-nestjs-bai03/</link><pubDate>Wed, 21 Jun 2023 14:59:42 +0700</pubDate><guid>https://nextjsvietnam.com/post/khoa-hoc-nestjs-bai03/</guid><description>Source Code Lession 03 Source Code Bài 03 Tìm hiểu về module trong NestJS - ứng dụng xây dựng cấu trúc thư mục cho Pet Website Tìm hiểu về EJS và cách tạo layout chung Làm việc với form và kiểm tra dữ liệu đầu vào Tổng quan Mô hình MVC Phía trên mô hình luồng dữ liệu từ khi người dùng thực hiện yêu cầu cho đến khi nhận được kết quả.</description></item><item><title>Khóa học Nestjs - Bài 02 - Giới thiệu mô hình MVC</title><link>https://nextjsvietnam.com/post/khoa-hoc-nestjs-bai-02/</link><pubDate>Tue, 20 Jun 2023 14:57:33 +0700</pubDate><guid>https://nextjsvietnam.com/post/khoa-hoc-nestjs-bai-02/</guid><description>Source Code Session 002 Source Code Bài 02 Phân tích yêu cầu thiết kế sơ bộ Thiết lập cấu trúc dự án Giới thiệu tổng quan về các lớp trong mô hình MVC và code thực hành Phân tích yêu cầu Sitemap Functional details Thiết kế cơ sở dữ liệu Thiết lập cấu trúc dự án Tạo 1 dự án mới với NestJS Cấu trúc thư mục dự án theo cấu trúc module và mô hình MVC Debug dự án NestJS với VSCode Tạo 1 dự án mới với NestJS nest new nestjs-tutorial-2023 --skip-install cd nestjs-tutorial-2023 npm i Sau khi khởi tạo dự án , cấu trúc cây thư mục của dự án sẽ giống như hình bên dưới:</description></item><item><title>Domain Driven Design trong 30 giây</title><link>https://nextjsvietnam.com/post/domain-driven-design-trong-30-giay/</link><pubDate>Mon, 12 Jun 2023 13:47:24 +0700</pubDate><guid>https://nextjsvietnam.com/post/domain-driven-design-trong-30-giay/</guid><description>Trong một mô hình thiết kế phần mềm truyền thống, khi chúng ta nhận 1 dự án, việc đầu tiên là phân tích các nghiệp vụ từ yêu cầu phần mềm, thu thập dữ liệu, và bắt đầu bằng việc thiết kế cơ sở dữ liệu, sau đó mới phân tách thành các chức năng cho các thành viên trong dự án để làm việc.
Đôi khi chúng ta sẽ nhận thấy rằng, trong mã nguồn, phần logic nghiệp vụ, đôi khi xen kẽ chung với cả phần giao diện người dùng hay thậm chí có cả kết nối database trong đó.</description></item><item><title>100 Frontend Interview Questions</title><link>https://nextjsvietnam.com/post/100-frontend-interview-questions/</link><pubDate>Tue, 30 May 2023 09:26:04 +0700</pubDate><guid>https://nextjsvietnam.com/post/100-frontend-interview-questions/</guid><description>HTML Inteview questions What are HTML Sematic Elements? A semantic element clearly describes its meaning to both the browser and the developer.
Examples of non-semantic elements:
- &amp;lt;div&amp;gt; - &amp;lt;span&amp;gt; Examples of semantic elements:
- &amp;lt;form&amp;gt; - &amp;lt;table&amp;gt; - &amp;lt;nav&amp;gt; HTML Form What&amp;rsquo;s happened when user submit a form The page will be reload and the form data will be sent to server
How to create a form that support to upload a file?</description></item><item><title>Chatgpt What Can Chat Gpt Do</title><link>https://nextjsvietnam.com/post/chatgpt-what-can-chat-gpt-do/</link><pubDate>Mon, 29 May 2023 13:58:50 +0700</pubDate><guid>https://nextjsvietnam.com/post/chatgpt-what-can-chat-gpt-do/</guid><description>What is ChatGPT? Language Model Instruction Tuning Common GPT Apps Companionship (Bạn đồng hành) Questions and Answers Creativity Multistep Planning (AutoGPT, BabyAGI)</description></item><item><title>Khóa học NestJS - Bài 01 - Lộ trình các bài học về NestJS Framework</title><link>https://nextjsvietnam.com/post/khoa-hoc-nestjs/</link><pubDate>Fri, 19 May 2023 22:00:00 +0700</pubDate><guid>https://nextjsvietnam.com/post/khoa-hoc-nestjs/</guid><description>Note: Toàn bộ mã nguồn của khóa học này đều được công khai trên github tại NestJS Tutorial 2023
Trước khi bắt đầu nội dung chi tiết của khóa học này, tôi sẽ liệt kê một số câu hỏi thường gặp, cũng như câu trả lời của nó.
Lời nói đầu Câu hỏi số 1 : Tại sao khóa học này xuất hiện? Câu trả lời là &amp;ldquo;Niềm tự hào dân tộc&amp;rdquo;.</description></item><item><title>Khóa học NextJS - Bài 01 - Lộ trình các bài học về NextJS</title><link>https://nextjsvietnam.com/post/khoa-hoc-nextjs/</link><pubDate>Fri, 19 May 2023 22:00:00 +0700</pubDate><guid>https://nextjsvietnam.com/post/khoa-hoc-nextjs/</guid><description>Note: Toàn bộ mã nguồn của khóa học này đều được công khai trên github tại Nextjs Tutorial 2023
Trước khi bắt đầu nội dung chi tiết của khóa học này, tôi sẽ liệt kê một số câu hỏi thường gặp, cũng như câu trả lời của nó.
Câu hỏi số 1 : Tại sao khóa học này xuất hiện? Câu trả lời là &amp;ldquo;Niềm tự hào dân tộc&amp;rdquo;. Phần lớn tài liệu dành cho lập trình viên được viết bằng &amp;ldquo;Tiếng Anh&amp;rdquo;, tuy nhiên một số quốc gia như &amp;ldquo;Trung Quốc&amp;rdquo;, &amp;ldquo;Nhật Bản&amp;rdquo;, &amp;ldquo;Hàn Quốc&amp;rdquo;, hay các nước lớn như &amp;ldquo;Pháp&amp;rdquo;, &amp;ldquo;Đức&amp;rdquo; đều có những tài liệu lập trình được địa phương hóa, với rất nhiều kiến thức chuyên sâu, cũng như các chú giải/kinh nghiệm của người đi trước được truyền tải lại.</description></item><item><title>Khóa học ReactJS - Bài 01 - Lộ trình các bài học về ReactJS</title><link>https://nextjsvietnam.com/post/khoa-hoc-reactjs/</link><pubDate>Fri, 19 May 2023 22:00:00 +0700</pubDate><guid>https://nextjsvietnam.com/post/khoa-hoc-reactjs/</guid><description>Note: Toàn bộ mã nguồn của khóa học này đều được công khai trên github tại ReactJS Tutorial 2023
Trước khi bắt đầu nội dung chi tiết của khóa học này, tôi sẽ liệt kê một số câu hỏi thường gặp, cũng như câu trả lời của nó.
Câu hỏi số 1 : Tại sao khóa học này xuất hiện? Câu trả lời là &amp;ldquo;Niềm tự hào dân tộc&amp;rdquo;. Phần lớn tài liệu dành cho lập trình viên được viết bằng &amp;ldquo;Tiếng Anh&amp;rdquo;, tuy nhiên một số quốc gia như &amp;ldquo;Trung Quốc&amp;rdquo;, &amp;ldquo;Nhật Bản&amp;rdquo;, &amp;ldquo;Hàn Quốc&amp;rdquo;, hay các nước lớn như &amp;ldquo;Pháp&amp;rdquo;, &amp;ldquo;Đức&amp;rdquo; đều có những tài liệu lập trình được địa phương hóa, với rất nhiều kiến thức chuyên sâu, cũng như các chú giải/kinh nghiệm của người đi trước được truyền tải lại.</description></item><item><title>React Multi Language App</title><link>https://nextjsvietnam.com/post/react-multi-language-app/</link><pubDate>Thu, 16 Mar 2023 01:49:48 +0700</pubDate><guid>https://nextjsvietnam.com/post/react-multi-language-app/</guid><description>The key is using the right tool. I&amp;rsquo;ve find out i18n-next is the best one for javascript ecosystem. It also supports ReactJS, VueJS, Angular, and many
Here is your tips
npm install react-i18next i18next --save yarn add react-i18next i18next i18next-icu Create your I18nAdapter
import { createInstance } from &amp;#34;i18next&amp;#34;; import { initReactI18next } from &amp;#34;react-i18next&amp;#34;; import { i18nActiveLanguage } from &amp;#34;./i18n-switcher&amp;#34;; import ICU from &amp;#34;i18next-icu&amp;#34;; import en from &amp;#34;./en&amp;#34;; import vn from &amp;#34;.</description></item><item><title>Learn Enough Oop to Be Dangerous</title><link>https://nextjsvietnam.com/post/learn-enough-oop-to-be-dangerous/</link><pubDate>Sun, 19 Feb 2023 16:00:15 +0700</pubDate><guid>https://nextjsvietnam.com/post/learn-enough-oop-to-be-dangerous/</guid><description>Phần 1 : OOP Basis Về mặt khái niệm, đầu tiên chúng ta cần hiểu 1 nguyên lí cơ bản là OOP sinh ra để làm gì.
Đơn giản, OOP sinh ra để giúp chúng ta lập trình theo phương pháp thể hiện lại các sự vật, sự việc ( được gọi là Object - đối tượng )trong thế giới thực. Và đồng thời cũng thể hiện các tính chất ( properties ) và hoạt động của các đối tượng với nhau.</description></item><item><title>Happy New Year 2023</title><link>https://nextjsvietnam.com/post/happy-new-year-2023/</link><pubDate>Sat, 31 Dec 2022 21:10:13 +0700</pubDate><guid>https://nextjsvietnam.com/post/happy-new-year-2023/</guid><description>#!/usr/bin/env node const words = [&amp;#34;Happy&amp;#34;, &amp;#34;New&amp;#34;, &amp;#34;Year&amp;#34;, &amp;#34;2023&amp;#34;]; const message = {}; words.map((w, index) =&amp;gt; { Reflect.set(message, index, w); }); let happyNewYearMessage2023 = &amp;#34;&amp;#34;; Reflect.ownKeys(message) .sort() .forEach((index) =&amp;gt; { happyNewYearMessage2023 = `${happyNewYearMessage2023}${Reflect.get( message, index )}`; }); console.log(happyNewYearMessage2023);</description></item><item><title>The Future of Hr</title><link>https://nextjsvietnam.com/post/the-future-of-hr/</link><pubDate>Sat, 17 Dec 2022 00:00:01 +0700</pubDate><guid>https://nextjsvietnam.com/post/the-future-of-hr/</guid><description>10 HR Criteria to building HR</description></item><item><title>How to Test the Database</title><link>https://nextjsvietnam.com/post/how-to-test-the-database/</link><pubDate>Sat, 12 Nov 2022 18:31:01 +0700</pubDate><guid>https://nextjsvietnam.com/post/how-to-test-the-database/</guid><description>Things you may concern when test your database
Basic CRUD Data mapping Steps Setup environment Prepare data and testcases Run tests Report Details Schema Database Table, Column Keys and Indexes Stored Procedures Trigger Database Server Configuration Functional Data integrity and consistency Non functional testing
Performance testing Load testing Stress testing Endurance testing Spike testing Volume testing Scalability testing Common Performance Problems Long Load time Poor response time Poor scalability Bottlenecking Common performance bottlenecks CPU utilization Memory utilization Network utilization Operating System limitations Disk usage References https://www.</description></item><item><title>Build Restful Api With Nestjs the Right Way</title><link>https://nextjsvietnam.com/post/build-restful-api-with-nestjs-the-right-way/</link><pubDate>Sun, 30 Oct 2022 06:00:00 +0700</pubDate><guid>https://nextjsvietnam.com/post/build-restful-api-with-nestjs-the-right-way/</guid><description>Foreword
If you are new with NestJS or you have been worked with it for several projects, this post is for you. In this article, I&amp;rsquo;ll share with you the real world process to build a Restful API from scratch with NestJS
Okie, let&amp;rsquo;s start. Imagination, we&amp;rsquo;ve already have detail specifications. This is our requirements in this sample:
Create Restful API for a image storage service that allow:</description></item><item><title>The Art of Programming</title><link>https://nextjsvietnam.com/post/the-art-of-programming/</link><pubDate>Sat, 29 Oct 2022 18:16:57 +0700</pubDate><guid>https://nextjsvietnam.com/post/the-art-of-programming/</guid><description>Topics to be discussed are anything about concepts in programming
Imperative programming vs Declarative programming Aspect Oriented Programming Imperative programming vs Declarative programming Functional Programming is a declarative programming paradigm, in contrast to imperative programming paradigms.
Declarative programming is a paradigm describing WHAT the program does, without explicitly specifying its control flow.
Imperative programming is a paradigm describing HOW the program should do something by explicitly specifying each instruction (or statement) step by step, which mutate the program&amp;rsquo;s state.</description></item><item><title>Learn Aws Solution Architect Associate the Fastest Way</title><link>https://nextjsvietnam.com/post/learn-aws-solution-architect-associate-the-fastest-way/</link><pubDate>Thu, 13 Oct 2022 09:40:09 +0700</pubDate><guid>https://nextjsvietnam.com/post/learn-aws-solution-architect-associate-the-fastest-way/</guid><description>The main topics will be discussed in this article:
Hands-on practice tutorials The architecture patterns : real cases example Tools AWS Policy Generator AWS CLI AWS EBS Volume Types I.Overview AWS provide us &amp;ldquo;The SAA-C03 Exam&amp;rdquo;, if you can pass the exam, you will get this certificate
AWS Solution Architect - Associate
About the exam:
Level : Associate Length: 130 minutes Format: 65 questions Cost : $150 USD Delivery Method : Testing center or online Scoring: scaled score between 100 - 1000.</description></item><item><title>Java for Beginner</title><link>https://nextjsvietnam.com/post/java-for-beginner/</link><pubDate>Wed, 12 Oct 2022 09:03:37 +0700</pubDate><guid>https://nextjsvietnam.com/post/java-for-beginner/</guid><description>Materials Java Beginner Learning Path Java Developer Center Overview Architecture Java Platform
What can Java do?
Development Tools Netbeans IntelliJ IDEA Setup Development Environment Install Java Install JDK &amp;amp; JRE What does Java 8 Packages include ?
Getting Start Object Oriented Concept
Object Class Instance Inheritance Language Basic
Variables Data types Operators Control flow Array Annotation Interface and inheritance Numbers &amp;amp; Strings Generic Lambda Expressions Pattern matching Exceptions Packages Debug &amp;amp; Test</description></item><item><title>100 Nodejs Interview Questions</title><link>https://nextjsvietnam.com/post/100-nodejs-interview-questions/</link><pubDate>Tue, 11 Oct 2022 14:30:39 +0700</pubDate><guid>https://nextjsvietnam.com/post/100-nodejs-interview-questions/</guid><description>Question 1 : NodeJS Write Stream In the JavaScript file, write a program to perform a GET request on the route https://coderbyte.com/api/challenges/json/age-counting which contains a data key and the value is a string which contains items in the format: key=STRING, age=INTEGER. Your goal is to count how many items exist that have an age equal to 32. Then you should create a write stream to a file called output.txt and the contents should be the key values (from the json) each on a separate line in the order they appeared in the json file (the file should end with a newline character on its own line).</description></item><item><title>Reactjs Use Reducer the Right Way</title><link>https://nextjsvietnam.com/post/reactjs-use-reducer-the-right-way/</link><pubDate>Sat, 08 Oct 2022 23:11:52 +0700</pubDate><guid>https://nextjsvietnam.com/post/reactjs-use-reducer-the-right-way/</guid><description>Trong các dự án thực tế, việc 1 component chứa quá nhiều code thực hiện update states thông qua việc xử lý các sự kiện tương ứng của người dùng, sẽ khiến chúng ta thực sự bị choáng ko hề nhẹ. Do đó thay vì có 1 đống code bên trong component lần lượt setState cho từng event một, ReactJS cung cấp cho chúng ta 1 công cụ gọi là &amp;ldquo;Reducer&amp;rdquo;, giúp chúng ta xử lý logic cho toàn bộ state trong component này 1 một gọn gàng.</description></item><item><title>Validate Form Data Javascript the Right Way</title><link>https://nextjsvietnam.com/post/validate-form-data-javascript-the-right-way/</link><pubDate>Thu, 06 Oct 2022 08:36:10 +0700</pubDate><guid>https://nextjsvietnam.com/post/validate-form-data-javascript-the-right-way/</guid><description/></item><item><title>Manage Your Reactjs State the Right Way</title><link>https://nextjsvietnam.com/post/manage-your-reactjs-state-the-right-way/</link><pubDate>Wed, 05 Oct 2022 14:31:27 +0700</pubDate><guid>https://nextjsvietnam.com/post/manage-your-reactjs-state-the-right-way/</guid><description>Các khái niệm cần nắm trước khi đọc bài viết này:
Khái niệm cơ bản về React State Khái niệm cơ bản về React Hook Nội dung được chia sẻ phạm vi bài viết này:
Các nguyên tắc khi thiết kế data structure cho state Một số ví dụ cụ thể trong các dự án thực tế Phần 1: Các nguyên tắc khi thiết kế data structure cho state Về mặt định nghĩa, thì State trong ReactJS là 1 Javascript Object phản ánh phần dữ liệu của component và có thể bị thay đổi giá trị do các tác nhân trong ứng dụng ( người dùng, web worker, web socket, &amp;hellip;)</description></item><item><title>Software Architecture Design Guidelines</title><link>https://nextjsvietnam.com/post/software-architecture-design-guidelines/</link><pubDate>Wed, 05 Oct 2022 09:59:19 +0700</pubDate><guid>https://nextjsvietnam.com/post/software-architecture-design-guidelines/</guid><description>Lời nói đầu, trong bất kì một hoạt động sản xuất kinh doanh nào, không chỉ ngành IT nói riêng, mà trong thực tế hoạt động của nhiều ngành nghề khác. Việc xây dựng hệ thống là cực kì quan trọng.
Trong phạm vi của bài viết này, tôi xin chia sẻ những gì đúc kết được trong quá trình xây dựng hệ thống cho các dự án với các quy mô khác nhau.</description></item><item><title>Rest Api Implementation Guidelines</title><link>https://nextjsvietnam.com/post/rest-api-implementation-guidelines/</link><pubDate>Tue, 27 Sep 2022 08:49:59 +0700</pubDate><guid>https://nextjsvietnam.com/post/rest-api-implementation-guidelines/</guid><description>Các chủ đề chính sẽ đi qua trong bài viết ngày hôm nay:
Các thuật ngữ và khái niệm thường gặp khi thiết kế web API Các vấn đề và giải pháp Trình tự các bước khi thiết kế và lập trình web API Cách thức trình bày của bài viết này là chúng ta sẽ bắt đầu với thứ đơn giản nhất, sau đó nâng cấp dần, và cuối cùng là hệ thống hóa lại các bước cụ thể khi thiết kế web API.</description></item><item><title>Rest Api Design Checklist</title><link>https://nextjsvietnam.com/post/rest-api-design-checklist/</link><pubDate>Fri, 23 Sep 2022 14:33:24 +0700</pubDate><guid>https://nextjsvietnam.com/post/rest-api-design-checklist/</guid><description>REST API là gì? API : Application programming interface REST : Representational state transfer Giải thích theo thuật ngữ chuyên môn thì
REST API là một loạt các quy tắc được đặt ra khi thiết kế và lập trình cho các ứng dụng, nhằm mục đích thống nhất các thể hiện của trạng thái được truyền tải trong những ứng dụng này.
Còn nếu tiếp cận theo hướng ví dụ thực tế</description></item><item><title>Npm Cheatsheet</title><link>https://nextjsvietnam.com/post/npm-cheatsheet/</link><pubDate>Tue, 20 Sep 2022 17:09:13 +0700</pubDate><guid>https://nextjsvietnam.com/post/npm-cheatsheet/</guid><description>Basic commands Global
list global installed packages npm list -g list global installed packages without their dependencies npm list -g --depth=0 check a specific global package npm list -g express install global packages npm install -g &amp;lt;package_name&amp;gt; check outdated global packages npm outdated -g --depth=0 update global package npm update -g &amp;lt;package_name&amp;gt; uninstall global package npm uninstall -g &amp;lt;package_name&amp;gt; Local
list local installed packages npm list list local installed packages without their dependencies npm list --depth=0 check a specific local package npm list express install local package and save to package.</description></item><item><title>The Best Way to Upload File in Nestjs</title><link>https://nextjsvietnam.com/post/the-best-way-to-upload-file-in-nestjs/</link><pubDate>Wed, 10 Aug 2022 17:01:06 +0700</pubDate><guid>https://nextjsvietnam.com/post/the-best-way-to-upload-file-in-nestjs/</guid><description>In the last topic, we&amp;rsquo;ve already learn how to upload file with Multer. In this post, I wanna share with you the NestJS&amp;rsquo;s best practice to upload file.
Firstly, we need to install type safe for multer in case you didn&amp;rsquo;t.
npm i -D @types/multer In real world projects, we may have to allow user upload a single file or multiple files. With multer we need to define with the target route, we will upload single or multiple.</description></item><item><title>Vuejs How to Add TailwindCSS in Your Application</title><link>https://nextjsvietnam.com/post/vuejs-how-to-add-tailwind-in-your-application/</link><pubDate>Fri, 05 Aug 2022 20:07:21 +0700</pubDate><guid>https://nextjsvietnam.com/post/vuejs-how-to-add-tailwind-in-your-application/</guid><description>Install tailwindcss&amp;rsquo;s dependency packages Configure your template paths tailwind.config.js Add Sass Support npm install -D tailwindcss postcss autoprefixer npx tailwindcss init tailwind.config.cjs
/** @type {import(&amp;#39;tailwindcss&amp;#39;).Config} */ module.exports = { content: [&amp;#34;./index.html&amp;#34;, &amp;#34;./src/**/*.{vue,js,ts,jsx,tsx}&amp;#34;], theme: { extend: {}, }, plugins: [], }; npm add -D sass src/assets/scss/global.scss
/* Fonts */ @import url(&amp;#34;https://fonts.googleapis.com/css2?family=Merriweather:wght@400;700&amp;amp;display=swap&amp;#34;); @import url(&amp;#34;https://fonts.googleapis.com/icon?family=Material+Icons&amp;#34;); /* Tailwind base */ @tailwind base; @tailwind components; @tailwind utilities; h1, h2, h3, h4, h5, h6 { @apply font-bold; font-family: &amp;#34;Merriweather&amp;#34;, serif; } h6 { @apply text-xs; } h5 { @apply text-xs; } h4 { @apply text-sm; } h3 { @apply text-base; } h2 { @apply text-2xl; } h1 { @apply text-3xl; } .</description></item><item><title>How to Use Typescript Path Alias in Loopback 4</title><link>https://nextjsvietnam.com/post/how-to-use-typescript-path-alias-in-loopback-4/</link><pubDate>Fri, 05 Aug 2022 15:07:40 +0700</pubDate><guid>https://nextjsvietnam.com/post/how-to-use-typescript-path-alias-in-loopback-4/</guid><description>The problem In Node.js (or TS/JS in general) you can import single modules into your code. This might look the following:
import { Example } from &amp;#34;../example/model&amp;#34;; import { Article } from &amp;#34;../article/model&amp;#34;; The problem we have here is that the deeper your project tree is the more &amp;lsquo;../&amp;rsquo; are required to access modules in higher layers. Actually, this doesn&amp;rsquo;t look very beautiful to be honest. Fortunately we can change that.</description></item><item><title>Nestjs Request and Response Object</title><link>https://nextjsvietnam.com/post/nestjs-request-and-response-object/</link><pubDate>Fri, 05 Aug 2022 10:06:04 +0700</pubDate><guid>https://nextjsvietnam.com/post/nestjs-request-and-response-object/</guid><description>Note: All of demo source code you can find our in github nestjs boilerplate
As you&amp;rsquo;ve known, in a request we will have:
Route Params ( included in URL ) Query Params ( included in URL ) Body ( json/form-data/multipart/form-data ) There are 2 ways to get these values
Library specific Approach - Express import { Controller, Req, Res } from &amp;#34;@nestjs/common&amp;#34;; import { Request, Response } from &amp;#34;express&amp;#34;; @Controller(&amp;#34;examples&amp;#34;) export class ExamplesController { @Post(&amp;#34;request-object/express/:email&amp;#34;) exampleRequestObjectExpress(@Req() req: Request, @Res() res: Response) { const responseData = { approach: &amp;#34;express&amp;#34;, routeParams: req.</description></item><item><title>Nestjs Pipes</title><link>https://nextjsvietnam.com/post/nestjs-pipes/</link><pubDate>Thu, 04 Aug 2022 10:46:09 +0700</pubDate><guid>https://nextjsvietnam.com/post/nestjs-pipes/</guid><description>Note: All of demo source code you can find our in github nestjs boilerplate
What is Pipe?
A pipe is a class annotated with the @Injectable() decorator, which implements the PipeTransform interface
Pipes operate on the arguments being processed by a controller route handler.
Nest interposes a pipe just before a method is invoked, and the pipe receives the arguments destined for the method and operates on them</description></item><item><title>Validate Request Input in Nestjs</title><link>https://nextjsvietnam.com/post/validate-request-input-in-nestjs/</link><pubDate>Fri, 29 Jul 2022 15:17:27 +0700</pubDate><guid>https://nextjsvietnam.com/post/validate-request-input-in-nestjs/</guid><description>Note: All of demo source code you can find our in github nestjs boilerplate
It is best practice to validate the correctness of any data sent into a web application
There are several libraries support us to verify data :
json schema joi validator And in typescript, we have a special library that support decorator
Class Validator - internally uses validator.js to perform validation. Class-validator works on both browser and node.</description></item><item><title>Nestjs Provider</title><link>https://nextjsvietnam.com/post/nestjs-provider/</link><pubDate>Thu, 28 Jul 2022 14:41:08 +0700</pubDate><guid>https://nextjsvietnam.com/post/nestjs-provider/</guid><description>Note: All of demo source code you can find our in github nestjs boilerplate
Many of the basic Nest classes may be treated as a provider:
Services Repositories Factories Helpers The main idea of a provider is that it can be injected as a dependency
This means NestJS will be act as a container and creating relationship between objects and wire them up at runtime
When creating a provider, we should consider these aspects</description></item><item><title>Thiện tâm</title><link>https://nextjsvietnam.com/post/thien-tam/</link><pubDate>Thu, 28 Jul 2022 09:18:57 +0700</pubDate><guid>https://nextjsvietnam.com/post/thien-tam/</guid><description>Người làm điều thiện, phúc tuy chưa đến mà họa đã rời xa Thế gian lạnh ấm, mãi đan xen Nửa thì mưa gió, nửa phồn hoa Thế nhân không tỏ, thường oán trách Đâu biết vấn đề, ngụ trong tâm #Tướng tùy tâm sinh
Thiên đạo vô thân Thường giữ thiện nhân Người quân tử yêu cầu bản thân, kẻ tiểu nhân yêu cầu người khác Bần tiện bất năng di Phú quý bất đăng dâm Uy vũ bất đăng khuất Quân tử không đấu với tiểu nhân Ác nhân tự có ác nhân trị Lý tương sinh tương khắc Nhân quả tuần hoàn</description></item><item><title>Javascript Numeric Precision Issue</title><link>https://nextjsvietnam.com/post/javascript-numeric-precision-issue/</link><pubDate>Wed, 20 Jul 2022 11:47:31 +0700</pubDate><guid>https://nextjsvietnam.com/post/javascript-numeric-precision-issue/</guid><description>Bạn đã bao giờ gặp trường hợp như này chưa?
let a = 0.1; let b = 0.3; let c = a - b; let d = a * b; let e = b / a; let f = 0.2 * a; Here you are
// c -0.19999999999999998 // d 0.03 // e 2.9999999999999996 // f 0.020000000000000004 Nguyên nhân là vì floating-point trong Javascript được biểu diễn dưới dạng phân số nhị phân (cơ số 2).</description></item><item><title>Java for Professional</title><link>https://nextjsvietnam.com/post/java-for-professional/</link><pubDate>Wed, 20 Jul 2022 09:04:17 +0700</pubDate><guid>https://nextjsvietnam.com/post/java-for-professional/</guid><description/></item><item><title>Java for Pre Intermediate</title><link>https://nextjsvietnam.com/post/java-for-pre-intermediate/</link><pubDate>Wed, 20 Jul 2022 09:04:00 +0700</pubDate><guid>https://nextjsvietnam.com/post/java-for-pre-intermediate/</guid><description>Java Advanced APIs Java EE Essentials Java EE Tutorial References Java point EE</description></item><item><title>Sử dụng Firebase Realtime Database để gửi thông báo cho người dùng trong web app</title><link>https://nextjsvietnam.com/post/su-dung-firebase-realtime-database-gui-thong-bao/</link><pubDate>Tue, 12 Jul 2022 17:09:16 +0700</pubDate><guid>https://nextjsvietnam.com/post/su-dung-firebase-realtime-database-gui-thong-bao/</guid><description>Firebase Realtime Database Create new project https://console.firebase.google.com/u/0/ Step 1
Step 2
Step 3
Add new firebase realtime database Select your database region
Test Mode Enable
Finally, you will have this new database with the generated URI
Let’s design a simple notification database &amp;#34;notifications&amp;#34;: { &amp;#34;$userId&amp;#34;: { &amp;#34;notificationId&amp;#34;: 1, &amp;#34;content&amp;#34;: &amp;#34;hello&amp;#34;, &amp;#34;notificationType&amp;#34;: 1, &amp;#34;isRead&amp;#34;: false, &amp;#34;isSent&amp;#34;: false }, } { &amp;#34;notifications&amp;#34;: { &amp;#34;1&amp;#34;: [ { &amp;#34;userId&amp;#34;: 1, &amp;#34;notificationId&amp;#34;: 1, &amp;#34;content&amp;#34;: &amp;#34;hello&amp;#34;, &amp;#34;notificationType&amp;#34;: 1, &amp;#34;isRead&amp;#34;: false, &amp;#34;isSent&amp;#34;: false }, { &amp;#34;userId&amp;#34;: 1, &amp;#34;notificationId&amp;#34;: 2, &amp;#34;content&amp;#34;: &amp;#34;hey&amp;#34;, &amp;#34;notificationType&amp;#34;: 2, &amp;#34;isRead&amp;#34;: false, &amp;#34;isSent&amp;#34;: false } ], &amp;#34;2&amp;#34;: [ { &amp;#34;userId&amp;#34;: 2, &amp;#34;notificationId&amp;#34;: 3, &amp;#34;content&amp;#34;: &amp;#34;heyo&amp;#34;, &amp;#34;notificationType&amp;#34;: 1, &amp;#34;isRead&amp;#34;: false, &amp;#34;isSent&amp;#34;: false } ] } } Import</description></item><item><title>Tim Hieu Ve Props Va State Trong Reactjs</title><link>https://nextjsvietnam.com/post/tim-hieu-ve-props-va-state-trong-reactjs/</link><pubDate>Tue, 12 Jul 2022 15:14:47 +0700</pubDate><guid>https://nextjsvietnam.com/post/tim-hieu-ve-props-va-state-trong-reactjs/</guid><description/></item><item><title>Con đường trở thành lập trình viên fullstack JS</title><link>https://nextjsvietnam.com/post/con-duong-tro-lap-lap-trinh-vien-fullstack-js/</link><pubDate>Tue, 12 Jul 2022 14:24:28 +0700</pubDate><guid>https://nextjsvietnam.com/post/con-duong-tro-lap-lap-trinh-vien-fullstack-js/</guid><description/></item><item><title>Create New Spa With Reactjs</title><link>https://nextjsvietnam.com/post/create-new-spa-with-reactjs/</link><pubDate>Tue, 12 Jul 2022 14:23:31 +0700</pubDate><guid>https://nextjsvietnam.com/post/create-new-spa-with-reactjs/</guid><description/></item><item><title>Ngay Dau Di Lam Dev Backend</title><link>https://nextjsvietnam.com/post/ngay-dau-di-lam-dev-backend/</link><pubDate>Tue, 12 Jul 2022 11:41:01 +0700</pubDate><guid>https://nextjsvietnam.com/post/ngay-dau-di-lam-dev-backend/</guid><description/></item><item><title>System Design Head First</title><link>https://nextjsvietnam.com/post/system-design-head-first/</link><pubDate>Tue, 12 Jul 2022 11:39:43 +0700</pubDate><guid>https://nextjsvietnam.com/post/system-design-head-first/</guid><description/></item><item><title>Developer Your Rest Api With Nestjs</title><link>https://nextjsvietnam.com/post/developer-your-rest-api-with-nestjs/</link><pubDate>Tue, 12 Jul 2022 11:39:11 +0700</pubDate><guid>https://nextjsvietnam.com/post/developer-your-rest-api-with-nestjs/</guid><description>Ứng dụng Xây dựng REST API cung cấp dữ liệu thời gian thực giá vàng
Tính năng cập nhật giá vàng Cập nhật giá vàng theo ngày : nhập thông thường Cập nhật giá vàng hàng loạt: import tập tin excel theo định dạng Cập nhật giá vàng tự động: thiết lập link liên kết lấy giá vàng, khoảng thời gian lấy Tính năng hiển thị giá vàng Dạng hiện thị : dạng bảng hoặc dạng biểu đồ</description></item><item><title>Create Static Blog With Hugo and Github Pages in 5 Minutes</title><link>https://nextjsvietnam.com/post/create-static-blog-with-hugo-and-github-pages-in-5-minutes/</link><pubDate>Tue, 21 Jun 2022 15:43:50 +0700</pubDate><guid>https://nextjsvietnam.com/post/create-static-blog-with-hugo-and-github-pages-in-5-minutes/</guid><description>Todo [x] Download hugo releases for windows 10 https://gohugo.io/getting-started/installing/ Extract and copy hugo.exe to your HUGO_PATH Add your HUGO_PATH to environment path. Window Icon + &amp;lsquo;env&amp;rsquo; =&amp;gt; Edit System Variables Eg: C:/softwares/hugo
Open system environment variable Add new hugo path Add hugo path to path Test
hugo --help [x] Create new hugo site hugo new site blog.jsguru.net --force [x] Setup gh-pages for hugo https://github.com/marketplace/actions/hugo-setup
.github\workflows\gh-pages.yml
name: GitHub Pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.</description></item><item><title>Setup NodeJS Development Environment in 5 Minutes</title><link>https://nextjsvietnam.com/post/setup-nodejs-development-enviroment-in-5-minutes/</link><pubDate>Tue, 21 Jun 2022 15:43:50 +0700</pubDate><guid>https://nextjsvietnam.com/post/setup-nodejs-development-enviroment-in-5-minutes/</guid><description>Installation https://nodejs.org/en/download/</description></item></channel></rss>